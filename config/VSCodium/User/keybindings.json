// Default Keybindings of Visual Studio Code 1.82.2 for Linux
  
[
    { "key": "escape escape",         "command": "workbench.action.exitZenMode",
                                         "when": "inZenMode" },
    { "key": "shift+escape",          "command": "closeReferenceSearch",
                                         "when": "inReferenceSearchEditor && !config.editor.stablePeek" },
    { "key": "escape",                "command": "closeReferenceSearch",
                                         "when": "inReferenceSearchEditor && !config.editor.stablePeek" },
    { "key": "escape",                "command": "editor.closeTestPeek",
                                         "when": "testing.isInPeek && !config.editor.stablePeek || testing.isPeekVisible && !config.editor.stablePeek" },
    { "key": "shift+escape",          "command": "cancelSelection",
                                         "when": "editorHasSelection && textInputFocus" },
    { "key": "escape",                "command": "cancelSelection",
                                         "when": "editorHasSelection && textInputFocus" },
    { "key": "meta+end",              "command": "cursorBottom",
                                         "when": "textInputFocus" },
    { "key": "meta+shift+end",        "command": "cursorBottomSelect",
                                         "when": "textInputFocus" },
    { "key": "down",                  "command": "cursorDown",
                                         "when": "textInputFocus" },
    { "key": "shift+down",            "command": "cursorDownSelect",
                                         "when": "textInputFocus" },
    { "key": "end",                   "command": "cursorEnd",
                                         "when": "textInputFocus",
                                         "args": {"sticky":false} },
    { "key": "shift+end",             "command": "cursorEndSelect",
                                         "when": "textInputFocus",
                                         "args": {"sticky":false} },
    { "key": "home",                  "command": "cursorHome",
                                         "when": "textInputFocus" },
    { "key": "shift+home",            "command": "cursorHomeSelect",
                                         "when": "textInputFocus" },
    { "key": "left",                  "command": "cursorLeft",
                                         "when": "textInputFocus" },
    { "key": "shift+left",            "command": "cursorLeftSelect",
                                         "when": "textInputFocus" },
    { "key": "pagedown",              "command": "cursorPageDown",
                                         "when": "textInputFocus" },
    { "key": "shift+pagedown",        "command": "cursorPageDownSelect",
                                         "when": "textInputFocus" },
    { "key": "pageup",                "command": "cursorPageUp",
                                         "when": "textInputFocus" },
    { "key": "shift+pageup",          "command": "cursorPageUpSelect",
                                         "when": "textInputFocus" },
    { "key": "right",                 "command": "cursorRight",
                                         "when": "textInputFocus" },
    { "key": "shift+right",           "command": "cursorRightSelect",
                                         "when": "textInputFocus" },
    { "key": "meta+home",             "command": "cursorTop",
                                         "when": "textInputFocus" },
    { "key": "meta+shift+home",       "command": "cursorTopSelect",
                                         "when": "textInputFocus" },
    { "key": "up",                    "command": "cursorUp",
                                         "when": "textInputFocus" },
    { "key": "shift+up",              "command": "cursorUpSelect",
                                         "when": "textInputFocus" },
    { "key": "shift+backspace",       "command": "deleteLeft",
                                         "when": "textInputFocus" },
    { "key": "backspace",             "command": "deleteLeft",
                                         "when": "textInputFocus" },
    { "key": "delete",                "command": "deleteRight",
                                         "when": "textInputFocus" },
    { "key": "meta+a",                "command": "editor.action.selectAll" },
    { "key": "meta+l",                "command": "expandLineSelection",
                                         "when": "textInputFocus" },
    { "key": "down",                  "command": "inlineChat.arrowOutDown",
                                         "when": "inlineChatFocused && inlineChatHasProvider && inlineChatInnerCursorLast && !accessibilityModeEnabled && !isEmbeddedDiffEditor" },
    { "key": "up",                    "command": "inlineChat.arrowOutUp",
                                         "when": "inlineChatFocused && inlineChatHasProvider && inlineChatInnerCursorFirst && !accessibilityModeEnabled && !isEmbeddedDiffEditor" },
    { "key": "down",                  "command": "notebook.focusNextEditor",
                                         "when": "config.notebook.navigation.allowNavigateToSurroundingCells && inlineChatFocused && inlineChatInnerCursorLast && inputFocus && notebookEditorFocused && !accessibilityModeEnabled && !isEmbeddedDiffEditor && notebookEditorCursorAtBoundary != 'none' && notebookEditorCursorAtBoundary != 'top'" },
    { "key": "down",                  "command": "notebook.focusNextEditor",
                                         "when": "config.notebook.navigation.allowNavigateToSurroundingCells && inlineChatFocused && inlineChatInnerCursorLast && notebookCursorNavigationMode && notebookEditorFocused && !accessibilityModeEnabled && !isEmbeddedDiffEditor && !notebookCellMarkdownEditMode && notebookCellType == 'markup'" },
    { "key": "shift+tab",             "command": "outdent",
                                         "when": "editorTextFocus && !editorReadonly && !editorTabMovesFocus" },
    { "key": "meta+shift+z",          "command": "redo" },
    { "key": "meta+y",                "command": "redo" },
    { "key": "meta+down",             "command": "scrollLineDown",
                                         "when": "textInputFocus" },
    { "key": "meta+up",               "command": "scrollLineUp",
                                         "when": "textInputFocus" },
    { "key": "alt+pagedown",          "command": "scrollPageDown",
                                         "when": "textInputFocus" },
    { "key": "alt+pageup",            "command": "scrollPageUp",
                                         "when": "textInputFocus" },
    { "key": "tab",                   "command": "tab",
                                         "when": "editorTextFocus && !editorReadonly && !editorTabMovesFocus" },
    { "key": "meta+z",                "command": "undo" },
    { "key": "shift+down",            "command": "cursorColumnSelectDown",
                                         "when": "editorColumnSelection && textInputFocus" },
    { "key": "shift+left",            "command": "cursorColumnSelectLeft",
                                         "when": "editorColumnSelection && textInputFocus" },
    { "key": "shift+pagedown",        "command": "cursorColumnSelectPageDown",
                                         "when": "editorColumnSelection && textInputFocus" },
    { "key": "shift+pageup",          "command": "cursorColumnSelectPageUp",
                                         "when": "editorColumnSelection && textInputFocus" },
    { "key": "shift+right",           "command": "cursorColumnSelectRight",
                                         "when": "editorColumnSelection && textInputFocus" },
    { "key": "shift+up",              "command": "cursorColumnSelectUp",
                                         "when": "editorColumnSelection && textInputFocus" },
    { "key": "shift+escape",          "command": "removeSecondaryCursors",
                                         "when": "editorHasMultipleSelections && textInputFocus" },
    { "key": "escape",                "command": "removeSecondaryCursors",
                                         "when": "editorHasMultipleSelections && textInputFocus" },
    { "key": "enter",                 "command": "inlineChat.accept",
                                         "when": "inlineChatFocused && inlineChatHasProvider && inlineChatVisible && !inlineChatEmpty" },
    { "key": "down",                  "command": "inlineChat.focus",
                                         "when": "editorTextFocus && inlineChatVisible && !accessibilityModeEnabled && !inlineChatFocused && !isEmbeddedDiffEditor && inlineChatOuterCursorPosition == 'above'" },
    { "key": "up",                    "command": "inlineChat.focus",
                                         "when": "editorTextFocus && inlineChatVisible && !accessibilityModeEnabled && !inlineChatFocused && !isEmbeddedDiffEditor && inlineChatOuterCursorPosition == 'below'" },
    { "key": "meta+down",             "command": "inlineChat.nextFromHistory",
                                         "when": "inlineChatFocused && inlineChatHasProvider && inlineChatInnerCursorEnd" },
    { "key": "meta+up",               "command": "inlineChat.previousFromHistory",
                                         "when": "inlineChatFocused && inlineChatHasProvider && inlineChatInnerCursorStart" },
    { "key": "f12",                   "command": "goToNextReference",
                                         "when": "inReferenceSearchEditor || referenceSearchVisible" },
    { "key": "f4",                    "command": "goToNextReference",
                                         "when": "inReferenceSearchEditor || referenceSearchVisible" },
    { "key": "shift+f12",             "command": "goToPreviousReference",
                                         "when": "inReferenceSearchEditor || referenceSearchVisible" },
    { "key": "shift+f4",              "command": "goToPreviousReference",
                                         "when": "inReferenceSearchEditor || referenceSearchVisible" },
    { "key": "shift+enter",           "command": "refactorPreview.apply",
                                         "when": "refactorPreview.enabled && refactorPreview.hasCheckedChanges && focusedView == 'refactorPreview'" },
    { "key": "alt+enter",             "command": "testing.editFocusedTest",
                                         "when": "focusedView == 'workbench.view.testing'" },
    { "key": "escape",                "command": "notebook.cell.quitEdit",
                                         "when": "inputFocus && notebookEditorFocused && !editorHasMultipleSelections && !editorHasSelection && !editorHoverVisible" },
    { "key": "meta+enter",            "command": "notebook.cell.quitEdit",
                                         "when": "inputFocus && notebookEditorFocused && notebookCellType == 'markup'" },
    { "key": "escape",                "command": "inlineChat.cancel",
                                         "when": "inlineChatHasProvider && inlineChatVisible" },
    { "key": "meta+f",                "command": "actions.find",
                                         "when": "editorFocus || editorIsOpen" },
    { "key": "enter",                 "command": "breakpointWidget.action.acceptInput",
                                         "when": "breakpointWidgetVisible && inBreakpointWidget" },
    { "key": "enter",                 "command": "chat.action.acceptInput",
                                         "when": "inChatInput && textInputFocus" },
    { "key": "meta+up",               "command": "chat.action.focus",
                                         "when": "inChatInput && textInputFocus" },
    { "key": "shift+escape",          "command": "closeBreakpointWidget",
                                         "when": "breakpointWidgetVisible && textInputFocus" },
    { "key": "escape",                "command": "closeBreakpointWidget",
                                         "when": "breakpointWidgetVisible && textInputFocus" },
    { "key": "meta+u",                "command": "cursorUndo",
                                         "when": "textInputFocus" },
    { "key": "meta+right",            "command": "cursorWordEndRight",
                                         "when": "textInputFocus" },
    { "key": "meta+shift+right",      "command": "cursorWordEndRightSelect",
                                         "when": "textInputFocus" },
    { "key": "meta+left",             "command": "cursorWordLeft",
                                         "when": "textInputFocus" },
    { "key": "meta+shift+left",       "command": "cursorWordLeftSelect",
                                         "when": "textInputFocus" },
    { "key": "meta+backspace",        "command": "deleteWordLeft",
                                         "when": "textInputFocus && !editorReadonly" },
    { "key": "meta+delete",           "command": "deleteWordRight",
                                         "when": "textInputFocus && !editorReadonly" },
    { "key": "f7",                    "command": "editor.action.accessibleDiffViewer.next",
                                         "when": "isInDiffEditor" },
    { "key": "shift+f7",              "command": "editor.action.accessibleDiffViewer.prev",
                                         "when": "isInDiffEditor" },
    { "key": "meta+k meta+c",         "command": "editor.action.addCommentLine",
                                         "when": "editorTextFocus && !editorReadonly" },
    { "key": "meta+d",                "command": "editor.action.addSelectionToNextFindMatch",
                                         "when": "editorFocus" },
    { "key": "shift+alt+[IntlBackslash]", "command": "editor.action.autoFix",
                                         "when": "textInputFocus && !editorReadonly && supportedCodeAction =~ /(\\s|^)quickfix\\b/" },
    { "key": "shift+alt+.",           "command": "editor.action.autoFix",
                                         "when": "textInputFocus && !editorReadonly && supportedCodeAction =~ /(\\s|^)quickfix\\b/" },
    { "key": "meta+shift+a",          "command": "editor.action.blockComment",
                                         "when": "editorTextFocus && !editorReadonly" },
    { "key": "escape",                "command": "editor.action.cancelSelectionAnchor",
                                         "when": "editorTextFocus && selectionAnchorSet" },
    { "key": "meta+f2",               "command": "editor.action.changeAll",
                                         "when": "editorTextFocus && !editorReadonly" },
    { "key": "meta+c",                "command": "editor.action.clipboardCopyAction" },
    { "key": "meta+x",                "command": "editor.action.clipboardCutAction" },
    { "key": "shift+insert",          "command": "editor.action.clipboardPasteAction" },
    { "key": "meta+v",                "command": "editor.action.clipboardPasteAction" },
    { "key": "meta+/",                "command": "editor.action.commentLine",
                                         "when": "editorTextFocus && !editorReadonly" },
    { "key": "meta+shift+alt+down",   "command": "editor.action.copyLinesDownAction",
                                         "when": "editorTextFocus && !editorReadonly" },
    { "key": "meta+shift+alt+up",     "command": "editor.action.copyLinesUpAction",
                                         "when": "editorTextFocus && !editorReadonly" },
    { "key": "meta+shift+k",          "command": "editor.action.deleteLines",
                                         "when": "textInputFocus && !editorReadonly" },
    { "key": "alt+f3",                "command": "editor.action.dirtydiff.next",
                                         "when": "editorTextFocus && !textCompareEditorActive" },
    { "key": "shift+alt+f3",          "command": "editor.action.dirtydiff.previous",
                                         "when": "editorTextFocus && !textCompareEditorActive" },
    { "key": "enter",                 "command": "editor.action.extensioneditor.findNext",
                                         "when": "webviewFindWidgetFocused && !editorFocus && activeEditor == 'workbench.editor.extension'" },
    { "key": "shift+enter",           "command": "editor.action.extensioneditor.findPrevious",
                                         "when": "webviewFindWidgetFocused && !editorFocus && activeEditor == 'workbench.editor.extension'" },
    { "key": "meta+f",                "command": "editor.action.extensioneditor.showfind",
                                         "when": "!editorFocus && activeEditor == 'workbench.editor.extension'" },
    { "key": "meta+shift+i",          "command": "editor.action.formatDocument",
                                         "when": "editorHasDocumentFormattingProvider && editorTextFocus && !editorReadonly && !inCompositeEditor" },
    { "key": "meta+shift+i",          "command": "editor.action.formatDocument.none",
                                         "when": "editorTextFocus && !editorHasDocumentFormattingProvider && !editorReadonly" },
    { "key": "meta+k meta+f",         "command": "editor.action.formatSelection",
                                         "when": "editorHasDocumentSelectionFormattingProvider && editorTextFocus && !editorReadonly" },
    { "key": "meta+down",             "command": "editor.action.goToBottomHover",
                                         "when": "editorHoverFocused" },
    { "key": "end",                   "command": "editor.action.goToBottomHover",
                                         "when": "editorHoverFocused" },
    { "key": "enter",                 "command": "editor.action.goToFocusedStickyScrollLine",
                                         "when": "stickyScrollFocused" },
    { "key": "meta+f12",              "command": "editor.action.goToImplementation",
                                         "when": "editorHasImplementationProvider && editorTextFocus && !isInEmbeddedEditor" },
    { "key": "shift+f12",             "command": "editor.action.goToReferences",
                                         "when": "editorHasReferenceProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor" },
    { "key": "meta+up",               "command": "editor.action.goToTopHover",
                                         "when": "editorHoverFocused" },
    { "key": "home",                  "command": "editor.action.goToTopHover",
                                         "when": "editorHoverFocused" },
    { "key": "escape",                "command": "editor.action.hideColorPicker",
                                         "when": "standaloneColorPickerVisible" },
    { "key": "meta+shift+[IntlBackslash]", "command": "editor.action.inPlaceReplace.down",
                                         "when": "editorTextFocus && !editorReadonly" },
    { "key": "meta+shift+.",          "command": "editor.action.inPlaceReplace.down",
                                         "when": "editorTextFocus && !editorReadonly" },
    { "key": "meta+[IntlBackslash]",  "command": "editor.action.inPlaceReplace.up",
                                         "when": "editorTextFocus && !editorReadonly" },
    { "key": "meta+shift+,",          "command": "editor.action.inPlaceReplace.up",
                                         "when": "editorTextFocus && !editorReadonly" },
    { "key": "meta+]",                "command": "editor.action.indentLines",
                                         "when": "editorTextFocus && !editorReadonly" },
    { "key": "escape",                "command": "editor.action.inlineSuggest.hide",
                                         "when": "inlineSuggestionVisible" },
    { "key": "alt+]",                 "command": "editor.action.inlineSuggest.showNext",
                                         "when": "inlineSuggestionVisible && !editorReadonly" },
    { "key": "alt+[",                 "command": "editor.action.inlineSuggest.showPrevious",
                                         "when": "inlineSuggestionVisible && !editorReadonly" },
    { "key": "enter",                 "command": "editor.action.insertColorWithStandaloneColorPicker",
                                         "when": "standaloneColorPickerFocused" },
    { "key": "meta+shift+up",         "command": "editor.action.insertCursorAbove",
                                         "when": "editorTextFocus" },
    { "key": "shift+alt+up",          "command": "editor.action.insertCursorAbove",
                                         "when": "editorTextFocus" },
    { "key": "shift+alt+i",           "command": "editor.action.insertCursorAtEndOfEachLineSelected",
                                         "when": "editorTextFocus" },
    { "key": "meta+shift+down",       "command": "editor.action.insertCursorBelow",
                                         "when": "editorTextFocus" },
    { "key": "shift+alt+down",        "command": "editor.action.insertCursorBelow",
                                         "when": "editorTextFocus" },
    { "key": "meta+enter",            "command": "editor.action.insertLineAfter",
                                         "when": "editorTextFocus && !editorReadonly" },
    { "key": "meta+shift+enter",      "command": "editor.action.insertLineBefore",
                                         "when": "editorTextFocus && !editorReadonly" },
    { "key": "meta+shift+\\",         "command": "editor.action.jumpToBracket",
                                         "when": "editorTextFocus" },
    { "key": "meta+shift+f2",         "command": "editor.action.linkedEditing",
                                         "when": "editorHasRenameProvider && editorTextFocus && !editorReadonly" },
    { "key": "alt+f8",                "command": "editor.action.marker.next",
                                         "when": "editorFocus" },
    { "key": "f8",                    "command": "editor.action.marker.nextInFiles",
                                         "when": "editorFocus" },
    { "key": "shift+alt+f8",          "command": "editor.action.marker.prev",
                                         "when": "editorFocus" },
    { "key": "shift+f8",              "command": "editor.action.marker.prevInFiles",
                                         "when": "editorFocus" },
    { "key": "alt+down",              "command": "editor.action.moveLinesDownAction",
                                         "when": "editorTextFocus && !editorReadonly" },
    { "key": "alt+up",                "command": "editor.action.moveLinesUpAction",
                                         "when": "editorTextFocus && !editorReadonly" },
    { "key": "meta+k meta+d",         "command": "editor.action.moveSelectionToNextFindMatch",
                                         "when": "editorFocus" },
    { "key": "alt+f9",                "command": "editor.action.nextCommentThreadAction",
                                         "when": "editorFocus" },
    { "key": "f3",                    "command": "editor.action.nextMatchFindAction",
                                         "when": "editorFocus" },
    { "key": "enter",                 "command": "editor.action.nextMatchFindAction",
                                         "when": "editorFocus && findInputFocussed" },
    { "key": "meta+f3",               "command": "editor.action.nextSelectionMatchFindAction",
                                         "when": "editorFocus" },
    { "key": "shift+alt+o",           "command": "editor.action.organizeImports",
                                         "when": "textInputFocus && !editorReadonly && supportedCodeAction =~ /(\\s|^)source\\.organizeImports\\b/" },
    { "key": "meta+[",                "command": "editor.action.outdentLines",
                                         "when": "editorTextFocus && !editorReadonly" },
    { "key": "alt+down",              "command": "editor.action.pageDownHover",
                                         "when": "editorHoverFocused" },
    { "key": "pagedown",              "command": "editor.action.pageDownHover",
                                         "when": "editorHoverFocused" },
    { "key": "alt+up",                "command": "editor.action.pageUpHover",
                                         "when": "editorHoverFocused" },
    { "key": "pageup",                "command": "editor.action.pageUpHover",
                                         "when": "editorHoverFocused" },
    { "key": "meta+shift+f10",        "command": "editor.action.peekDefinition",
                                         "when": "editorHasDefinitionProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor" },
    { "key": "meta+shift+f12",        "command": "editor.action.peekImplementation",
                                         "when": "editorHasImplementationProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor" },
    { "key": "shift+alt+f9",          "command": "editor.action.previousCommentThreadAction",
                                         "when": "editorFocus" },
    { "key": "shift+f3",              "command": "editor.action.previousMatchFindAction",
                                         "when": "editorFocus" },
    { "key": "shift+enter",           "command": "editor.action.previousMatchFindAction",
                                         "when": "editorFocus && findInputFocussed" },
    { "key": "meta+shift+f3",         "command": "editor.action.previousSelectionMatchFindAction",
                                         "when": "editorFocus" },
    { "key": "meta+.",                "command": "editor.action.quickFix",
                                         "when": "editorHasCodeActionsProvider && textInputFocus && !editorReadonly" },
    { "key": "meta+shift+r",          "command": "editor.action.refactor",
                                         "when": "editorHasCodeActionsProvider && textInputFocus && !editorReadonly" },
    { "key": "meta+alt+backspace",    "command": "editor.action.removeBrackets",
                                         "when": "editorTextFocus" },
    { "key": "meta+k meta+u",         "command": "editor.action.removeCommentLine",
                                         "when": "editorTextFocus && !editorReadonly" },
    { "key": "f2",                    "command": "editor.action.rename",
                                         "when": "editorHasRenameProvider && editorTextFocus && !editorReadonly" },
    { "key": "f12",                   "command": "editor.action.revealDefinition",
                                         "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor" },
    { "key": "meta+f12",              "command": "editor.action.revealDefinition",
                                         "when": "editorHasDefinitionProvider && editorTextFocus && isWeb && !isInEmbeddedEditor" },
    { "key": "meta+k f12",            "command": "editor.action.revealDefinitionAside",
                                         "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor" },
    { "key": "meta+k meta+f12",       "command": "editor.action.revealDefinitionAside",
                                         "when": "editorHasDefinitionProvider && editorTextFocus && isWeb && !isInEmbeddedEditor" },
    { "key": "down",                  "command": "editor.action.scrollDownHover",
                                         "when": "editorHoverFocused" },
    { "key": "left",                  "command": "editor.action.scrollLeftHover",
                                         "when": "editorHoverFocused" },
    { "key": "right",                 "command": "editor.action.scrollRightHover",
                                         "when": "editorHoverFocused" },
    { "key": "up",                    "command": "editor.action.scrollUpHover",
                                         "when": "editorHoverFocused" },
    { "key": "escape",                "command": "editor.action.selectEditor",
                                         "when": "stickyScrollFocused" },
    { "key": "meta+k meta+k",         "command": "editor.action.selectFromAnchorToCursor",
                                         "when": "editorTextFocus && selectionAnchorSet" },
    { "key": "meta+shift+l",          "command": "editor.action.selectHighlights",
                                         "when": "editorFocus" },
    { "key": "down",                  "command": "editor.action.selectNextStickyScrollLine",
                                         "when": "stickyScrollFocused" },
    { "key": "up",                    "command": "editor.action.selectPreviousStickyScrollLine",
                                         "when": "stickyScrollFocused" },
    { "key": "meta+k meta+b",         "command": "editor.action.setSelectionAnchor",
                                         "when": "editorTextFocus" },
    { "key": "shift+f10",             "command": "editor.action.showContextMenu",
                                         "when": "textInputFocus" },
    { "key": "meta+k meta+i",         "command": "editor.action.showHover",
                                         "when": "editorTextFocus" },
    { "key": "shift+alt+right",       "command": "editor.action.smartSelect.expand",
                                         "when": "editorTextFocus" },
    { "key": "shift+alt+left",        "command": "editor.action.smartSelect.shrink",
                                         "when": "editorTextFocus" },
    { "key": "meta+h",                "command": "editor.action.startFindReplaceAction",
                                         "when": "editorFocus || editorIsOpen" },
    { "key": "meta+m",                "command": "editor.action.toggleTabFocusMode" },
    { "key": "alt+z",                 "command": "editor.action.toggleWordWrap" },
    { "key": "meta+shift+space",      "command": "editor.action.triggerParameterHints",
                                         "when": "editorHasSignatureHelpProvider && editorTextFocus" },
    { "key": "meta+i",                "command": "editor.action.triggerSuggest",
                                         "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly && !suggestWidgetVisible" },
    { "key": "meta+space",            "command": "editor.action.triggerSuggest",
                                         "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly && !suggestWidgetVisible" },
    { "key": "meta+k meta+x",         "command": "editor.action.trimTrailingWhitespace",
                                         "when": "editorTextFocus && !editorReadonly" },
    { "key": "enter",                 "command": "editor.action.webvieweditor.findNext",
                                         "when": "webviewFindWidgetFocused && !editorFocus && activeEditor == 'WebviewEditor'" },
    { "key": "shift+enter",           "command": "editor.action.webvieweditor.findPrevious",
                                         "when": "webviewFindWidgetFocused && !editorFocus && activeEditor == 'WebviewEditor'" },
    { "key": "escape",                "command": "editor.action.webvieweditor.hideFind",
                                         "when": "webviewFindWidgetVisible && !editorFocus && activeEditor == 'WebviewEditor'" },
    { "key": "meta+f",                "command": "editor.action.webvieweditor.showFind",
                                         "when": "webviewFindWidgetEnabled && !editorFocus && activeEditor == 'WebviewEditor'" },
    { "key": "f7",                    "command": "editor.action.wordHighlight.next",
                                         "when": "editorTextFocus && hasWordHighlights" },
    { "key": "shift+f7",              "command": "editor.action.wordHighlight.prev",
                                         "when": "editorTextFocus && hasWordHighlights" },
    { "key": "escape",                "command": "editor.cancelOperation",
                                         "when": "cancellableOperation" },
    { "key": "meta+.",                "command": "editor.changeDropType",
                                         "when": "dropWidgetVisible" },
    { "key": "meta+.",                "command": "editor.changePasteType",
                                         "when": "pasteWidgetVisible" },
    { "key": "meta+k meta+,",         "command": "editor.createFoldingRangeFromSelection",
                                         "when": "editorTextFocus && foldingEnabled" },
    { "key": "escape",                "command": "editor.debug.action.closeExceptionWidget",
                                         "when": "exceptionWidgetVisible" },
    { "key": "meta+k meta+i",         "command": "editor.debug.action.showDebugHover",
                                         "when": "editorTextFocus && inDebugMode" },
    { "key": "f9",                    "command": "editor.debug.action.toggleBreakpoint",
                                         "when": "debuggersAvailable && editorTextFocus" },
    { "key": "tab",                   "command": "editor.emmet.action.expandAbbreviation",
                                         "when": "config.emmet.triggerExpansionOnTab && editorTextFocus && !editorReadonly && !editorTabMovesFocus" },
    { "key": "meta+shift+[",          "command": "editor.fold",
                                         "when": "editorTextFocus && foldingEnabled" },
    { "key": "meta+k meta+0",         "command": "editor.foldAll",
                                         "when": "editorTextFocus && foldingEnabled" },
    { "key": "meta+k meta+/",         "command": "editor.foldAllBlockComments",
                                         "when": "editorTextFocus && foldingEnabled" },
    { "key": "meta+k meta+-",         "command": "editor.foldAllExcept",
                                         "when": "editorTextFocus && foldingEnabled" },
    { "key": "meta+k meta+8",         "command": "editor.foldAllMarkerRegions",
                                         "when": "editorTextFocus && foldingEnabled" },
    { "key": "meta+k meta+1",         "command": "editor.foldLevel1",
                                         "when": "editorTextFocus && foldingEnabled" },
    { "key": "meta+k meta+2",         "command": "editor.foldLevel2",
                                         "when": "editorTextFocus && foldingEnabled" },
    { "key": "meta+k meta+3",         "command": "editor.foldLevel3",
                                         "when": "editorTextFocus && foldingEnabled" },
    { "key": "meta+k meta+4",         "command": "editor.foldLevel4",
                                         "when": "editorTextFocus && foldingEnabled" },
    { "key": "meta+k meta+5",         "command": "editor.foldLevel5",
                                         "when": "editorTextFocus && foldingEnabled" },
    { "key": "meta+k meta+6",         "command": "editor.foldLevel6",
                                         "when": "editorTextFocus && foldingEnabled" },
    { "key": "meta+k meta+7",         "command": "editor.foldLevel7",
                                         "when": "editorTextFocus && foldingEnabled" },
    { "key": "meta+k meta+[",         "command": "editor.foldRecursively",
                                         "when": "editorTextFocus && foldingEnabled" },
    { "key": "f12",                   "command": "editor.gotoNextSymbolFromResult",
                                         "when": "hasSymbols" },
    { "key": "escape",                "command": "editor.gotoNextSymbolFromResult.cancel",
                                         "when": "hasSymbols" },
    { "key": "meta+k meta+.",         "command": "editor.removeManualFoldingRanges",
                                         "when": "editorTextFocus && foldingEnabled" },
    { "key": "meta+k meta+l",         "command": "editor.toggleFold",
                                         "when": "editorTextFocus && foldingEnabled" },
    { "key": "meta+shift+]",          "command": "editor.unfold",
                                         "when": "editorTextFocus && foldingEnabled" },
    { "key": "meta+k meta+j",         "command": "editor.unfoldAll",
                                         "when": "editorTextFocus && foldingEnabled" },
    { "key": "meta+k meta+=",         "command": "editor.unfoldAllExcept",
                                         "when": "editorTextFocus && foldingEnabled" },
    { "key": "meta+k meta+9",         "command": "editor.unfoldAllMarkerRegions",
                                         "when": "editorTextFocus && foldingEnabled" },
    { "key": "meta+k meta+]",         "command": "editor.unfoldRecursively",
                                         "when": "editorTextFocus && foldingEnabled" },
    { "key": "escape",                "command": "inlayHints.stopReadingLineWithHint",
                                         "when": "isReadingLineWithInlayHints" },
    { "key": "escape",                "command": "inlineChat.discard",
                                         "when": "inlineChatHasProvider && inlineChatVisible && !inlineChatUserDidEdit" },
    { "key": "escape",                "command": "inlineChat.stop",
                                         "when": "inlineChatHasActiveRequest && inlineChatHasProvider && inlineChatVisible && !inlineChatEmpty" },
    { "key": "tab",                   "command": "insertSnippet",
                                         "when": "editorTextFocus && hasSnippetCompletions && !editorTabMovesFocus && !inSnippetMode" },
    { "key": "escape",                "command": "interactive.acceptChanges",
                                         "when": "inlineChatHasProvider && inlineChatUserDidEdit && inlineChatVisible && !inlineChatDocumentChanged || inlineChatHasProvider && inlineChatUserDidEdit && inlineChatVisible && config.inlineChat.editMode != 'preview'" },
    { "key": "meta+enter",            "command": "interactive.execute",
                                         "when": "activeEditor == 'workbench.editor.interactive'" },
    { "key": "pagedown",              "command": "notebook.cell.cursorPageDown",
                                         "when": "editorTextFocus && inputFocus && notebookEditorFocused" },
    { "key": "shift+pagedown",        "command": "notebook.cell.cursorPageDownSelect",
                                         "when": "editorTextFocus && inputFocus && notebookEditorFocused" },
    { "key": "pageup",                "command": "notebook.cell.cursorPageUp",
                                         "when": "editorTextFocus && inputFocus && notebookEditorFocused" },
    { "key": "shift+pageup",          "command": "notebook.cell.cursorPageUpSelect",
                                         "when": "editorTextFocus && inputFocus && notebookEditorFocused" },
    { "key": "meta+enter",            "command": "notebook.cell.execute",
                                         "when": "notebookCellListFocused && notebookMissingKernelExtension && !notebookCellExecuting && notebookCellType == 'code' || notebookCellListFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelCount > 0 || notebookCellListFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelSourceCount > 0" },
    { "key": "alt+enter",             "command": "notebook.cell.executeAndInsertBelow",
                                         "when": "notebookCellListFocused && notebookCellType == 'markup' || notebookCellListFocused && notebookMissingKernelExtension && !notebookCellExecuting && notebookCellType == 'code' || notebookCellListFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelCount > 0 || notebookCellListFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelSourceCount > 0" },
    { "key": "shift+enter",           "command": "notebook.cell.executeAndSelectBelow",
                                         "when": "notebookCellListFocused && !inlineChatFocused && notebookCellType == 'markup' || notebookCellListFocused && notebookMissingKernelExtension && !inlineChatFocused && !notebookCellExecuting && notebookCellType == 'code' || notebookCellListFocused && !inlineChatFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelCount > 0 || notebookCellListFocused && !inlineChatFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelSourceCount > 0" },
    { "key": "meta+shift+v",          "command": "notebook.cell.pasteAbove",
                                         "when": "notebookEditorFocused && !inputFocus" },
    { "key": "down",                  "command": "notebook.focusNextEditor",
                                         "when": "config.notebook.navigation.allowNavigateToSurroundingCells && editorTextFocus && inputFocus && notebookEditorFocused && !accessibilityModeEnabled && !isEmbeddedDiffEditor && notebookEditorCursorAtBoundary != 'none' && notebookEditorCursorAtBoundary != 'top'" },
    { "key": "up",                    "command": "notebook.focusPreviousEditor",
                                         "when": "config.notebook.navigation.allowNavigateToSurroundingCells && editorTextFocus && inputFocus && notebookEditorFocused && !accessibilityModeEnabled && !isEmbeddedDiffEditor && notebookEditorCursorAtBoundary != 'bottom' && notebookEditorCursorAtBoundary != 'none'" },
    { "key": "meta+shift+i",          "command": "notebook.formatCell",
                                         "when": "editorHasDocumentFormattingProvider && editorTextFocus && inCompositeEditor && notebookEditable && !editorReadonly && activeEditor == 'workbench.editor.notebook'" },
    { "key": "meta+enter",            "command": "openReferenceToSide",
                                         "when": "listFocus && referenceSearchVisible && !inputFocus && !treeElementCanCollapse && !treeElementCanExpand" },
    { "key": "enter",                 "command": "repl.action.acceptInput",
                                         "when": "inDebugRepl && textInputFocus" },
    { "key": "meta+f",                "command": "repl.action.filter",
                                         "when": "inDebugRepl && textInputFocus" },
    { "key": "meta+shift+r",          "command": "rerunSearchEditorSearch",
                                         "when": "inSearchEditor" },
    { "key": "escape",                "command": "search.action.focusQueryEditorWidget",
                                         "when": "inSearchEditor" },
    { "key": "meta+shift+backspace",  "command": "search.searchEditor.action.deleteFileResults",
                                         "when": "inSearchEditor" },
    { "key": "escape",                "command": "settings.action.clearSearchResults",
                                         "when": "inSettingsEditor && inSettingsSearch" },
    { "key": "down",                  "command": "settings.action.focusSettingsFile",
                                         "when": "inSettingsSearch && !suggestWidgetVisible" },
    { "key": "meta+f",                "command": "settings.action.search",
                                         "when": "inSettingsEditor" },
    { "key": "meta+/",                "command": "toggleExplainMode",
                                         "when": "suggestWidgetVisible" },
    { "key": "meta+k f2",             "command": "togglePeekWidgetFocus",
                                         "when": "inReferenceSearchEditor || referenceSearchVisible" },
    { "key": "escape",                "command": "welcome.goBack",
                                         "when": "inWelcome && activeEditor == 'gettingStartedPage'" },
    { "key": "meta+alt+enter",        "command": "workbench.action.chat.runInTerminal",
                                         "when": "hasChatProvider && inChat" },
    { "key": "alt+f5",                "command": "workbench.action.editor.nextChange",
                                         "when": "editorTextFocus && !textCompareEditorActive" },
    { "key": "shift+alt+f5",          "command": "workbench.action.editor.previousChange",
                                         "when": "editorTextFocus && !textCompareEditorActive" },
    { "key": "shift+escape",          "command": "workbench.action.hideComment",
                                         "when": "commentEditorFocused" },
    { "key": "escape",                "command": "workbench.action.hideComment",
                                         "when": "commentEditorFocused" },
    { "key": "meta+enter",            "command": "workbench.action.submitComment",
                                         "when": "commentEditorFocused" },
    { "key": "meta+right",            "command": "editor.action.inlineSuggest.acceptNextWord",
                                         "when": "inlineSuggestionVisible && !editorReadonly" },
    { "key": "alt+f8",                "command": "testing.goToNextMessage",
                                         "when": "editorFocus && testing.isPeekVisible" },
    { "key": "shift+alt+f8",          "command": "testing.goToPreviousMessage",
                                         "when": "editorFocus && testing.isPeekVisible" },
    { "key": "shift+escape",          "command": "closeFindWidget",
                                         "when": "editorFocus && findWidgetVisible && !isComposing" },
    { "key": "escape",                "command": "closeFindWidget",
                                         "when": "editorFocus && findWidgetVisible && !isComposing" },
    { "key": "meta+alt+enter",        "command": "editor.action.replaceAll",
                                         "when": "editorFocus && findWidgetVisible" },
    { "key": "meta+shift+1",          "command": "editor.action.replaceOne",
                                         "when": "editorFocus && findWidgetVisible" },
    { "key": "enter",                 "command": "editor.action.replaceOne",
                                         "when": "editorFocus && findWidgetVisible && replaceInputFocussed" },
    { "key": "alt+enter",             "command": "editor.action.selectAllMatches",
                                         "when": "editorFocus && findWidgetVisible" },
    { "key": "alt+c",                 "command": "toggleFindCaseSensitive",
                                         "when": "editorFocus" },
    { "key": "alt+l",                 "command": "toggleFindInSelection",
                                         "when": "editorFocus" },
    { "key": "alt+r",                 "command": "toggleFindRegex",
                                         "when": "editorFocus" },
    { "key": "alt+w",                 "command": "toggleFindWholeWord",
                                         "when": "editorFocus" },
    { "key": "alt+p",                 "command": "togglePreserveCase",
                                         "when": "editorFocus" },
    { "key": "meta+enter",            "command": "interactive.acceptChanges",
                                         "when": "inlineChatHasProvider && inlineChatVisible && !inlineChatDocumentChanged || inlineChatHasProvider && inlineChatVisible && config.inlineChat.editMode != 'preview'" },
    { "key": "tab",                   "command": "jumpToNextSnippetPlaceholder",
                                         "when": "editorTextFocus && hasNextTabstop && inSnippetMode" },
    { "key": "shift+tab",             "command": "jumpToPrevSnippetPlaceholder",
                                         "when": "editorTextFocus && hasPrevTabstop && inSnippetMode" },
    { "key": "escape",                "command": "leaveEditorMessage",
                                         "when": "messageVisible" },
    { "key": "shift+escape",          "command": "leaveSnippet",
                                         "when": "editorTextFocus && inSnippetMode" },
    { "key": "escape",                "command": "leaveSnippet",
                                         "when": "editorTextFocus && inSnippetMode" },
    { "key": "shift+escape",          "command": "closeDirtyDiff",
                                         "when": "dirtyDiffVisible" },
    { "key": "escape",                "command": "closeDirtyDiff",
                                         "when": "dirtyDiffVisible" },
    { "key": "shift+escape",          "command": "closeMarkersNavigation",
                                         "when": "editorFocus && markersNavigationVisible" },
    { "key": "escape",                "command": "closeMarkersNavigation",
                                         "when": "editorFocus && markersNavigationVisible" },
    { "key": "escape",                "command": "notifications.hideToasts",
                                         "when": "notificationToastsVisible" },
    { "key": "shift+escape",          "command": "closeParameterHints",
                                         "when": "editorFocus && parameterHintsVisible" },
    { "key": "escape",                "command": "closeParameterHints",
                                         "when": "editorFocus && parameterHintsVisible" },
    { "key": "alt+down",              "command": "showNextParameterHint",
                                         "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible" },
    { "key": "down",                  "command": "showNextParameterHint",
                                         "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible" },
    { "key": "alt+up",                "command": "showPrevParameterHint",
                                         "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible" },
    { "key": "up",                    "command": "showPrevParameterHint",
                                         "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible" },
    { "key": "shift+tab",             "command": "acceptAlternativeSelectedSuggestion",
                                         "when": "suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && textInputFocus" },
    { "key": "shift+enter",           "command": "acceptAlternativeSelectedSuggestion",
                                         "when": "suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && textInputFocus" },
    { "key": "tab",                   "command": "acceptSelectedSuggestion",
                                         "when": "suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && textInputFocus" },
    { "key": "enter",                 "command": "acceptSelectedSuggestion",
                                         "when": "acceptSuggestionOnEnter && suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && suggestionMakesTextEdit && textInputFocus" },
    { "key": "meta+i",                "command": "focusSuggestion",
                                         "when": "suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion" },
    { "key": "meta+space",            "command": "focusSuggestion",
                                         "when": "suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion" },
    { "key": "shift+escape",          "command": "hideSuggestWidget",
                                         "when": "suggestWidgetVisible && textInputFocus" },
    { "key": "escape",                "command": "hideSuggestWidget",
                                         "when": "suggestWidgetVisible && textInputFocus" },
    { "key": "tab",                   "command": "insertBestCompletion",
                                         "when": "atEndOfWord && textInputFocus && !hasOtherSuggestions && !inSnippetMode && !suggestWidgetVisible && config.editor.tabCompletion == 'on'" },
    { "key": "tab",                   "command": "insertNextSuggestion",
                                         "when": "hasOtherSuggestions && textInputFocus && !inSnippetMode && !suggestWidgetVisible && config.editor.tabCompletion == 'on'" },
    { "key": "shift+tab",             "command": "insertPrevSuggestion",
                                         "when": "hasOtherSuggestions && textInputFocus && !inSnippetMode && !suggestWidgetVisible && config.editor.tabCompletion == 'on'" },
    { "key": "meta+pagedown",         "command": "selectNextPageSuggestion",
                                         "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion" },
    { "key": "pagedown",              "command": "selectNextPageSuggestion",
                                         "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion" },
    { "key": "meta+down",             "command": "selectNextSuggestion",
                                         "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion" },
    { "key": "down",                  "command": "selectNextSuggestion",
                                         "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion" },
    { "key": "meta+pageup",           "command": "selectPrevPageSuggestion",
                                         "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion" },
    { "key": "pageup",                "command": "selectPrevPageSuggestion",
                                         "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion" },
    { "key": "meta+up",               "command": "selectPrevSuggestion",
                                         "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion" },
    { "key": "up",                    "command": "selectPrevSuggestion",
                                         "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion" },
    { "key": "meta+i",                "command": "toggleSuggestionDetails",
                                         "when": "suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && textInputFocus" },
    { "key": "meta+space",            "command": "toggleSuggestionDetails",
                                         "when": "suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && textInputFocus" },
    { "key": "meta+alt+space",        "command": "toggleSuggestionFocus",
                                         "when": "suggestWidgetVisible && textInputFocus" },
    { "key": "enter",                 "command": "acceptRenameInput",
                                         "when": "editorFocus && renameInputVisible && !isComposing" },
    { "key": "shift+enter",           "command": "acceptRenameInputWithPreview",
                                         "when": "config.editor.rename.enablePreview && editorFocus && renameInputVisible && !isComposing" },
    { "key": "shift+escape",          "command": "cancelLinkedEditingInput",
                                         "when": "LinkedEditingInputVisible && editorTextFocus" },
    { "key": "escape",                "command": "cancelLinkedEditingInput",
                                         "when": "LinkedEditingInputVisible && editorTextFocus" },
    { "key": "shift+escape",          "command": "cancelRenameInput",
                                         "when": "editorFocus && renameInputVisible" },
    { "key": "escape",                "command": "cancelRenameInput",
                                         "when": "editorFocus && renameInputVisible" },
    { "key": "meta+shift+l",          "command": "addCursorsAtSearchResults",
                                         "when": "fileMatchOrMatchFocus && searchViewletVisible" },
    { "key": "meta+shift+;",          "command": "breadcrumbs.focus",
                                         "when": "breadcrumbsPossible && breadcrumbsVisible" },
    { "key": "meta+shift+[IntlBackslash]", "command": "breadcrumbs.focusAndSelect",
                                         "when": "breadcrumbsPossible && breadcrumbsVisible" },
    { "key": "meta+shift+.",          "command": "breadcrumbs.focusAndSelect",
                                         "when": "breadcrumbsPossible && breadcrumbsVisible" },
    { "key": "meta+right",            "command": "breadcrumbs.focusNext",
                                         "when": "breadcrumbsActive && breadcrumbsVisible" },
    { "key": "right",                 "command": "breadcrumbs.focusNext",
                                         "when": "breadcrumbsActive && breadcrumbsVisible" },
    { "key": "meta+left",             "command": "breadcrumbs.focusPrevious",
                                         "when": "breadcrumbsActive && breadcrumbsVisible" },
    { "key": "left",                  "command": "breadcrumbs.focusPrevious",
                                         "when": "breadcrumbsActive && breadcrumbsVisible" },
    { "key": "meta+enter",            "command": "breadcrumbs.revealFocused",
                                         "when": "breadcrumbsActive && breadcrumbsVisible" },
    { "key": "space",                 "command": "breadcrumbs.revealFocused",
                                         "when": "breadcrumbsActive && breadcrumbsVisible" },
    { "key": "meta+enter",            "command": "breadcrumbs.revealFocusedFromTreeAside",
                                         "when": "breadcrumbsActive && breadcrumbsVisible && listFocus && !inputFocus" },
    { "key": "down",                  "command": "breadcrumbs.selectFocused",
                                         "when": "breadcrumbsActive && breadcrumbsVisible" },
    { "key": "enter",                 "command": "breadcrumbs.selectFocused",
                                         "when": "breadcrumbsActive && breadcrumbsVisible" },
    { "key": "meta+shift+[IntlBackslash]", "command": "breadcrumbs.toggleToOn",
                                         "when": "!config.breadcrumbs.enabled" },
    { "key": "meta+shift+.",          "command": "breadcrumbs.toggleToOn",
                                         "when": "!config.breadcrumbs.enabled" },
    { "key": "escape",                "command": "closeReplaceInFilesWidget",
                                         "when": "replaceInputBoxFocus && searchViewletVisible" },
    { "key": "escape",                "command": "commentsClearFilterText",
                                         "when": "commentsFilterFocus" },
    { "key": "meta+f",                "command": "commentsFocusFilter",
                                         "when": "focusedView == 'workbench.panel.comments'" },
    { "key": "meta+down",             "command": "commentsFocusViewFromFilter",
                                         "when": "commentsFilterFocus" },
    { "key": "meta+alt+c",            "command": "copyFilePath",
                                         "when": "!editorFocus" },
    { "key": "meta+k meta+alt+c",     "command": "copyFilePath",
                                         "when": "editorFocus" },
    { "key": "meta+shift+alt+c",      "command": "copyRelativeFilePath",
                                         "when": "!editorFocus" },
    { "key": "meta+k meta+shift+alt+c", "command": "copyRelativeFilePath",
                                         "when": "editorFocus" },
    { "key": "alt+enter",             "command": "debug.openBreakpointToSide",
                                         "when": "breakpointsFocused" },
    { "key": "meta+enter",            "command": "debug.openBreakpointToSide",
                                         "when": "breakpointsFocused" },
    { "key": "meta+f5",               "command": "debug.openView",
                                         "when": "!debuggersAvailable" },
    { "key": "f5",                    "command": "debug.openView",
                                         "when": "!debuggersAvailable" },
    { "key": "delete",                "command": "debug.removeBreakpoint",
                                         "when": "breakpointsFocused && !breakpointInputFocused" },
    { "key": "delete",                "command": "debug.removeWatchExpression",
                                         "when": "watchExpressionsFocused && !expressionSelected" },
    { "key": "alt+-",                 "command": "decreaseSearchEditorContextLines",
                                         "when": "inSearchEditor" },
    { "key": "alt+f1",                "command": "editor.action.accessibilityHelp" },
    { "key": "shift+alt+f1",          "command": "editor.action.accessibilityHelp" },
    { "key": "alt+f2",                "command": "editor.action.accessibleView" },
    { "key": "shift+alt+f2",          "command": "editor.action.accessibleView" },
    { "key": "meta+/",                "command": "editor.action.accessibleViewAcceptInlineCompletion",
                                         "when": "accessibleViewIsShown && accessibleViewCurrentProviderId == 'inlineCompletions'" },
    { "key": "alt+f6",                "command": "editor.action.accessibleViewDisableHint",
                                         "when": "accessibilityHelpIsShown && accessibleViewVerbosityEnabled || accessibleViewIsShown && accessibleViewVerbosityEnabled" },
    { "key": "alt+]",                 "command": "editor.action.accessibleViewNext",
                                         "when": "accessibleViewIsShown && accessibleViewSupportsNavigation" },
    { "key": "alt+[",                 "command": "editor.action.accessibleViewPrevious",
                                         "when": "accessibleViewIsShown && accessibleViewSupportsNavigation" },
    { "key": "meta+k meta+k",         "command": "editor.action.defineKeybinding",
                                         "when": "resource == 'vscode-userdata:/home/runner/work/vs-code-default-keybindings/vs-code-default-keybindings/scripts/get_default_keybindings/empty2/User/keybindings.json'" },
    { "key": "tab",                   "command": "editor.action.inlineSuggest.commit",
                                         "when": "inlineSuggestionHasIndentationLessThanTabSize && inlineSuggestionVisible && !editorHoverFocused && !editorTabMovesFocus && !suggestWidgetVisible" },
    { "key": "shift+f9",              "command": "editor.debug.action.toggleInlineBreakpoint",
                                         "when": "editorTextFocus" },
    { "key": "shift+alt+d",           "command": "editor.detectLanguage",
                                         "when": "editorTextFocus && !notebookEditable" },
    { "key": "shift+enter",           "command": "editor.refocusCallHierarchy",
                                         "when": "callHierarchyVisible" },
    { "key": "shift+enter",           "command": "editor.refocusTypeHierarchy",
                                         "when": "typeHierarchyVisible" },
    { "key": "shift+alt+h",           "command": "editor.showCallHierarchy",
                                         "when": "editorHasCallHierarchyProvider && editorTextFocus && !inReferenceSearchEditor" },
    { "key": "shift+alt+h",           "command": "editor.showIncomingCalls",
                                         "when": "callHierarchyVisible && callHierarchyDirection == 'outgoingCalls'" },
    { "key": "shift+alt+h",           "command": "editor.showOutgoingCalls",
                                         "when": "callHierarchyVisible && callHierarchyDirection == 'incomingCalls'" },
    { "key": "shift+alt+h",           "command": "editor.showSubtypes",
                                         "when": "typeHierarchyVisible && typeHierarchyDirection == 'supertypes'" },
    { "key": "shift+alt+h",           "command": "editor.showSupertypes",
                                         "when": "typeHierarchyVisible && typeHierarchyDirection == 'subtypes'" },
    { "key": "meta+enter",            "command": "explorer.openToSide",
                                         "when": "explorerViewletFocus && foldersViewVisible && !inputFocus" },
    { "key": "shift+alt+f",           "command": "filesExplorer.findInFolder",
                                         "when": "explorerResourceIsFolder && filesExplorerFocus && foldersViewVisible && !inputFocus" },
    { "key": "alt+down",              "command": "history.showNext",
                                         "when": "historyNavigationForwardsEnabled && historyNavigationWidgetFocus && !isComposing && !suggestWidgetVisible" },
    { "key": "down",                  "command": "history.showNext",
                                         "when": "historyNavigationForwardsEnabled && historyNavigationWidgetFocus && !isComposing && !suggestWidgetVisible" },
    { "key": "alt+up",                "command": "history.showPrevious",
                                         "when": "historyNavigationBackwardsEnabled && historyNavigationWidgetFocus && !isComposing && !suggestWidgetVisible" },
    { "key": "up",                    "command": "history.showPrevious",
                                         "when": "historyNavigationBackwardsEnabled && historyNavigationWidgetFocus && !isComposing && !suggestWidgetVisible" },
    { "key": "alt+=",                 "command": "increaseSearchEditorContextLines",
                                         "when": "inSearchEditor" },
    { "key": "meta+k i",              "command": "inlineChat.start",
                                         "when": "inlineChatHasProvider && !editorReadonly" },
    { "key": "meta+i",                "command": "inlineChat.start",
                                         "when": "inlineChatHasProvider && !editorReadonly" },
    { "key": "meta+z",                "command": "inlineChat.unstash",
                                         "when": "inlineChatHasStashedSession && !editorReadonly" },
    { "key": "down",                  "command": "interactive.history.next",
                                         "when": "!suggestWidgetVisible && activeEditor == 'workbench.editor.interactive' && interactiveInputCursorAtBoundary != 'none' && interactiveInputCursorAtBoundary != 'top'" },
    { "key": "up",                    "command": "interactive.history.previous",
                                         "when": "!suggestWidgetVisible && activeEditor == 'workbench.editor.interactive' && interactiveInputCursorAtBoundary != 'bottom' && interactiveInputCursorAtBoundary != 'none'" },
    { "key": "meta+end",              "command": "interactive.scrollToBottom",
                                         "when": "activeEditor == 'workbench.editor.interactive'" },
    { "key": "meta+home",             "command": "interactive.scrollToTop",
                                         "when": "activeEditor == 'workbench.editor.interactive'" },
    { "key": "enter",                 "command": "keybindings.editor.acceptWhenExpression",
                                         "when": "inKeybindings && whenFocus && !suggestWidgetVisible" },
    { "key": "meta+k meta+a",         "command": "keybindings.editor.addKeybinding",
                                         "when": "inKeybindings && keybindingFocus" },
    { "key": "escape",                "command": "keybindings.editor.clearSearchResults",
                                         "when": "inKeybindings && inKeybindingsSearch" },
    { "key": "meta+c",                "command": "keybindings.editor.copyKeybindingEntry",
                                         "when": "inKeybindings && keybindingFocus && !whenFocus" },
    { "key": "enter",                 "command": "keybindings.editor.defineKeybinding",
                                         "when": "inKeybindings && keybindingFocus && !whenFocus" },
    { "key": "meta+k meta+e",         "command": "keybindings.editor.defineWhenExpression",
                                         "when": "inKeybindings && keybindingFocus" },
    { "key": "meta+down",             "command": "keybindings.editor.focusKeybindings",
                                         "when": "inKeybindings && inKeybindingsSearch" },
    { "key": "alt+k",                 "command": "keybindings.editor.recordSearchKeys",
                                         "when": "inKeybindings && inKeybindingsSearch" },
    { "key": "escape",                "command": "keybindings.editor.rejectWhenExpression",
                                         "when": "inKeybindings && whenFocus && !suggestWidgetVisible" },
    { "key": "delete",                "command": "keybindings.editor.removeKeybinding",
                                         "when": "inKeybindings && keybindingFocus && !inputFocus" },
    { "key": "meta+f",                "command": "keybindings.editor.searchKeybindings",
                                         "when": "inKeybindings" },
    { "key": "alt+p",                 "command": "keybindings.editor.toggleSortByPrecedence",
                                         "when": "inKeybindings" },
    { "key": "escape",                "command": "list.clear",
                                         "when": "listFocus && listHasSelectionOrFocus && !inputFocus" },
    { "key": "escape",                "command": "list.closeFind",
                                         "when": "listFocus && treeFindOpen" },
    { "key": "left",                  "command": "list.collapse",
                                         "when": "listFocus && treeElementCanCollapse && !inputFocus || listFocus && treeElementHasParent && !inputFocus" },
    { "key": "meta+left",             "command": "list.collapseAll",
                                         "when": "listFocus && !inputFocus" },
    { "key": "right",                 "command": "list.expand",
                                         "when": "listFocus && treeElementCanExpand && !inputFocus || listFocus && treeElementHasChild && !inputFocus" },
    { "key": "shift+down",            "command": "list.expandSelectionDown",
                                         "when": "listFocus && listSupportsMultiselect && !inputFocus" },
    { "key": "shift+up",              "command": "list.expandSelectionUp",
                                         "when": "listFocus && listSupportsMultiselect && !inputFocus" },
    { "key": "f3",                    "command": "list.find",
                                         "when": "listFocus && listSupportsFind" },
    { "key": "meta+f",                "command": "list.find",
                                         "when": "listFocus && listSupportsFind" },
    { "key": "down",                  "command": "list.focusDown",
                                         "when": "listFocus && !inputFocus" },
    { "key": "home",                  "command": "list.focusFirst",
                                         "when": "listFocus && !inputFocus" },
    { "key": "end",                   "command": "list.focusLast",
                                         "when": "listFocus && !inputFocus" },
    { "key": "pagedown",              "command": "list.focusPageDown",
                                         "when": "listFocus && !inputFocus" },
    { "key": "pageup",                "command": "list.focusPageUp",
                                         "when": "listFocus && !inputFocus" },
    { "key": "up",                    "command": "list.focusUp",
                                         "when": "listFocus && !inputFocus" },
    { "key": "meta+down",             "command": "list.scrollDown",
                                         "when": "listFocus && !inputFocus && listScrollAtBoundary != 'both' && listScrollAtBoundary != 'bottom'" },
    { "key": "meta+up",               "command": "list.scrollUp",
                                         "when": "listFocus && !inputFocus && listScrollAtBoundary != 'both' && listScrollAtBoundary != 'top'" },
    { "key": "enter",                 "command": "list.select",
                                         "when": "listFocus && !inputFocus" },
    { "key": "meta+a",                "command": "list.selectAll",
                                         "when": "listFocus && listSupportsMultiselect && !inputFocus" },
    { "key": "space",                 "command": "list.toggleExpand",
                                         "when": "listFocus && !inputFocus" },
    { "key": "meta+shift+enter",      "command": "list.toggleSelection",
                                         "when": "listFocus && !inputFocus" },
    { "key": "y",                     "command": "notebook.cell.changeToCode",
                                         "when": "notebookEditorFocused && !inputFocus && !notebookOutputFocused && activeEditor == 'workbench.editor.notebook' && notebookCellType == 'markup'" },
    { "key": "m",                     "command": "notebook.cell.changeToMarkdown",
                                         "when": "notebookEditorFocused && !inputFocus && !notebookOutputFocused && activeEditor == 'workbench.editor.notebook' && notebookCellType == 'code'" },
    { "key": "alt+delete",            "command": "notebook.cell.clearOutputs",
                                         "when": "notebookCellEditable && notebookCellHasOutputs && notebookEditable && notebookEditorFocused && !inputFocus" },
    { "key": "meta+k meta+c",         "command": "notebook.cell.collapseCellInput",
                                         "when": "notebookCellListFocused && !inputFocus && !notebookCellInputIsCollapsed" },
    { "key": "meta+k t",              "command": "notebook.cell.collapseCellOutput",
                                         "when": "notebookCellHasOutputs && notebookCellListFocused && !inputFocus && !notebookCellOutputIsCollapsed" },
    { "key": "shift+alt+down",        "command": "notebook.cell.copyDown",
                                         "when": "notebookEditorFocused && !inputFocus" },
    { "key": "shift+alt+up",          "command": "notebook.cell.copyUp",
                                         "when": "notebookEditorFocused && !inputFocus" },
    { "key": "delete",                "command": "notebook.cell.delete",
                                         "when": "notebookEditorFocused && !inputFocus" },
    { "key": "shift+alt+d",           "command": "notebook.cell.detectLanguage",
                                         "when": "notebookCellEditable && notebookEditable" },
    { "key": "enter",                 "command": "notebook.cell.edit",
                                         "when": "notebookCellListFocused && notebookEditable && !editorHoverFocused && !inputFocus" },
    { "key": "meta+k meta+c",         "command": "notebook.cell.expandCellInput",
                                         "when": "notebookCellInputIsCollapsed && notebookCellListFocused" },
    { "key": "meta+k t",              "command": "notebook.cell.expandCellOutput",
                                         "when": "notebookCellListFocused && notebookCellOutputIsCollapsed" },
    { "key": "meta+down",             "command": "notebook.cell.focusInOutput",
                                         "when": "notebookCellHasOutputs && notebookEditorFocused" },
    { "key": "meta+up",               "command": "notebook.cell.focusOutOutput",
                                         "when": "notebookEditorFocused && notebookOutputFocused" },
    { "key": "meta+shift+enter",      "command": "notebook.cell.insertCodeCellAbove",
                                         "when": "notebookCellListFocused && !inputFocus" },
    { "key": "meta+enter",            "command": "notebook.cell.insertCodeCellBelow",
                                         "when": "notebookCellListFocused && !inputFocus" },
    { "key": "shift+alt+meta+j",      "command": "notebook.cell.joinAbove",
                                         "when": "notebookEditorFocused" },
    { "key": "alt+meta+j",            "command": "notebook.cell.joinBelow",
                                         "when": "notebookEditorFocused" },
    { "key": "alt+down",              "command": "notebook.cell.moveDown",
                                         "when": "notebookEditorFocused && !inputFocus" },
    { "key": "alt+up",                "command": "notebook.cell.moveUp",
                                         "when": "notebookEditorFocused && !inputFocus" },
    { "key": "meta+k meta+shift+\\",  "command": "notebook.cell.split",
                                         "when": "editorTextFocus && notebookCellEditable && notebookEditable && notebookEditorFocused" },
    { "key": "meta+k y",              "command": "notebook.cell.toggleOutputScrolling",
                                         "when": "notebookCellHasOutputs && notebookCellListFocused && !inputFocus" },
    { "key": "meta+l",                "command": "notebook.centerActiveCell",
                                         "when": "notebookEditorFocused" },
    { "key": "alt+f3",                "command": "notebook.diff.action.next",
                                         "when": "activeEditor == 'workbench.editor.notebookTextDiffEditor'" },
    { "key": "shift+alt+f3",          "command": "notebook.diff.action.previous",
                                         "when": "activeEditor == 'workbench.editor.notebookTextDiffEditor'" },
    { "key": "meta+f",                "command": "notebook.find",
                                         "when": "notebookEditorFocused && !editorFocus && activeEditor == 'workbench.editor.interactive' || notebookEditorFocused && !editorFocus && activeEditor == 'workbench.editor.notebook'" },
    { "key": "meta+end",              "command": "notebook.focusBottom",
                                         "when": "notebookEditorFocused && !inputFocus" },
    { "key": "down",                  "command": "notebook.focusNextEditor",
                                         "when": "config.notebook.navigation.allowNavigateToSurroundingCells && notebookCursorNavigationMode && notebookEditorFocused && !accessibilityModeEnabled && !isEmbeddedDiffEditor && !notebookCellMarkdownEditMode && notebookCellType == 'markup'" },
    { "key": "meta+down",             "command": "notebook.focusNextEditor",
                                         "when": "notebookEditorFocused && notebookOutputFocused" },
    { "key": "up",                    "command": "notebook.focusPreviousEditor",
                                         "when": "config.notebook.navigation.allowNavigateToSurroundingCells && notebookCursorNavigationMode && notebookEditorFocused && !accessibilityModeEnabled && !isEmbeddedDiffEditor && !notebookCellMarkdownEditMode && notebookCellType == 'markup'" },
    { "key": "meta+home",             "command": "notebook.focusTop",
                                         "when": "notebookEditorFocused && !inputFocus" },
    { "key": "left",                  "command": "notebook.fold",
                                         "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook'" },
    { "key": "meta+shift+[",          "command": "notebook.fold",
                                         "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook'" },
    { "key": "meta+shift+i",          "command": "notebook.format",
                                         "when": "notebookEditable && !editorTextFocus && activeEditor == 'workbench.editor.notebook'" },
    { "key": "escape",                "command": "notebook.hideFind",
                                         "when": "notebookEditorFocused && notebookFindWidgetFocused" },
    { "key": "right",                 "command": "notebook.unfold",
                                         "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook'" },
    { "key": "meta+shift+]",          "command": "notebook.unfold",
                                         "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook'" },
    { "key": "meta+shift+a",          "command": "notification.acceptPrimaryAction",
                                         "when": "notificationToastsVisible" },
    { "key": "delete",                "command": "notification.clear",
                                         "when": "notificationFocus" },
    { "key": "left",                  "command": "notification.collapse",
                                         "when": "notificationFocus" },
    { "key": "right",                 "command": "notification.expand",
                                         "when": "notificationFocus" },
    { "key": "enter",                 "command": "notification.toggle",
                                         "when": "notificationFocus" },
    { "key": "space",                 "command": "notification.toggle",
                                         "when": "notificationFocus" },
    { "key": "home",                  "command": "notifications.focusFirstToast",
                                         "when": "notificationFocus && notificationToastsVisible" },
    { "key": "pageup",                "command": "notifications.focusFirstToast",
                                         "when": "notificationFocus && notificationToastsVisible" },
    { "key": "end",                   "command": "notifications.focusLastToast",
                                         "when": "notificationFocus && notificationToastsVisible" },
    { "key": "pagedown",              "command": "notifications.focusLastToast",
                                         "when": "notificationFocus && notificationToastsVisible" },
    { "key": "down",                  "command": "notifications.focusNextToast",
                                         "when": "notificationFocus && notificationToastsVisible" },
    { "key": "up",                    "command": "notifications.focusPreviousToast",
                                         "when": "notificationFocus && notificationToastsVisible" },
    { "key": "escape",                "command": "problems.action.clearFilterText",
                                         "when": "problemsFilterFocus" },
    { "key": "meta+c",                "command": "problems.action.copy",
                                         "when": "problemsVisibility && !relatedInformationFocus && focusedView == 'workbench.panel.markers.view'" },
    { "key": "meta+f",                "command": "problems.action.focusFilter",
                                         "when": "focusedView == 'workbench.panel.markers.view'" },
    { "key": "meta+down",             "command": "problems.action.focusProblemsFromFilter",
                                         "when": "problemsFilterFocus" },
    { "key": "enter",                 "command": "problems.action.open",
                                         "when": "problemFocus" },
    { "key": "meta+enter",            "command": "problems.action.openToSide",
                                         "when": "problemFocus" },
    { "key": "meta+.",                "command": "problems.action.showQuickFixes",
                                         "when": "problemFocus" },
    { "key": "space",                 "command": "refactorPreview.toggleCheckedState",
                                         "when": "listFocus && refactorPreview.enabled && !inputFocus" },
    { "key": "meta+alt+r",            "command": "revealFileInOS",
                                         "when": "!editorFocus" },
    { "key": "enter",                 "command": "revealReference",
                                         "when": "listFocus && referenceSearchVisible && !inputFocus && !treeElementCanCollapse && !treeElementCanExpand" },
    { "key": "meta+enter",            "command": "scm.acceptInput",
                                         "when": "scmRepository" },
    { "key": "alt+down",              "command": "scm.forceViewNextCommit",
                                         "when": "scmRepository" },
    { "key": "alt+up",                "command": "scm.forceViewPreviousCommit",
                                         "when": "scmRepository" },
    { "key": "down",                  "command": "scm.viewNextCommit",
                                         "when": "scmInputIsInLastPosition && scmRepository && !suggestWidgetVisible" },
    { "key": "up",                    "command": "scm.viewPreviousCommit",
                                         "when": "scmInputIsInFirstPosition && scmRepository && !suggestWidgetVisible" },
    { "key": "escape",                "command": "search.action.cancel",
                                         "when": "listFocus && searchViewletVisible && !inputFocus && searchState != '0'" },
    { "key": "meta+c",                "command": "search.action.copyMatch",
                                         "when": "fileMatchOrMatchFocus" },
    { "key": "meta+alt+c",            "command": "search.action.copyPath",
                                         "when": "fileMatchOrFolderMatchWithResourceFocus" },
    { "key": "f4",                    "command": "search.action.focusNextSearchResult",
                                         "when": "hasSearchResult || inSearchEditor" },
    { "key": "shift+f4",              "command": "search.action.focusPreviousSearchResult",
                                         "when": "hasSearchResult || inSearchEditor" },
    { "key": "meta+up",               "command": "search.action.focusSearchFromResults",
                                         "when": "accessibilityModeEnabled && searchViewletVisible || firstMatchFocus && searchViewletVisible" },
    { "key": "alt+enter",             "command": "search.action.openInEditor",
                                         "when": "hasSearchResult && searchViewletFocus" },
    { "key": "enter",                 "command": "search.action.openResult",
                                         "when": "fileMatchOrMatchFocus && searchViewletVisible" },
    { "key": "meta+enter",            "command": "search.action.openResultToSide",
                                         "when": "fileMatchOrMatchFocus && searchViewletVisible" },
    { "key": "delete",                "command": "search.action.remove",
                                         "when": "fileMatchOrMatchFocus && searchViewletVisible" },
    { "key": "meta+shift+1",          "command": "search.action.replace",
                                         "when": "isEditableItem && matchFocus && replaceActive && searchViewletVisible" },
    { "key": "meta+alt+enter",        "command": "search.action.replaceAll",
                                         "when": "replaceActive && searchViewletVisible && !findWidgetVisible" },
    { "key": "meta+shift+enter",      "command": "search.action.replaceAllInFile",
                                         "when": "fileMatchFocus && isEditableItem && replaceActive && searchViewletVisible" },
    { "key": "meta+shift+1",          "command": "search.action.replaceAllInFile",
                                         "when": "fileMatchFocus && isEditableItem && replaceActive && searchViewletVisible" },
    { "key": "meta+shift+enter",      "command": "search.action.replaceAllInFolder",
                                         "when": "folderMatchFocus && isEditableItem && replaceActive && searchViewletVisible" },
    { "key": "meta+shift+1",          "command": "search.action.replaceAllInFolder",
                                         "when": "folderMatchFocus && isEditableItem && replaceActive && searchViewletVisible" },
    { "key": "shift+alt+f",           "command": "search.action.restrictSearchToFolder",
                                         "when": "folderMatchWithResourceFocus && searchViewletVisible" },
    { "key": "meta+down",             "command": "search.focus.nextInputBox",
                                         "when": "inSearchEditor && inputBoxFocus || inputBoxFocus && searchViewletVisible" },
    { "key": "meta+up",               "command": "search.focus.previousInputBox",
                                         "when": "inSearchEditor && inputBoxFocus || inputBoxFocus && searchViewletVisible && !searchInputBoxFocus" },
    { "key": "meta+shift+l",          "command": "selectAllSearchEditorMatches",
                                         "when": "inSearchEditor" },
    { "key": "escape",                "command": "settings.action.focusLevelUp",
                                         "when": "inSettingsEditor && !inSettingsJSONEditor && !inSettingsSearch" },
    { "key": "enter",                 "command": "settings.action.focusSettingControl",
                                         "when": "inSettingsEditor && settingRowFocus" },
    { "key": "down",                  "command": "settings.action.focusSettingsFromSearch",
                                         "when": "inSettingsSearch && !suggestWidgetVisible" },
    { "key": "enter",                 "command": "settings.action.focusSettingsList",
                                         "when": "inSettingsEditor && settingsTocRowFocus" },
    { "key": "left",                  "command": "settings.action.focusTOC",
                                         "when": "inSettingsEditor && settingRowFocus" },
    { "key": "shift+f9",              "command": "settings.action.showContextMenu",
                                         "when": "inSettingsEditor" },
    { "key": "meta+; meta+x",         "command": "testing.cancelRun" },
    { "key": "meta+; meta+a",         "command": "testing.debugAll" },
    { "key": "meta+; meta+c",         "command": "testing.debugAtCursor",
                                         "when": "editorTextFocus" },
    { "key": "meta+; meta+f",         "command": "testing.debugCurrentFile",
                                         "when": "editorTextFocus" },
    { "key": "meta+; meta+e",         "command": "testing.debugFailTests" },
    { "key": "meta+; meta+l",         "command": "testing.debugLastRun" },
    { "key": "meta+; meta+m",         "command": "testing.openOutputPeek" },
    { "key": "meta+; e",              "command": "testing.reRunFailTests" },
    { "key": "meta+; l",              "command": "testing.reRunLastRun" },
    { "key": "meta+; meta+r",         "command": "testing.refreshTests",
                                         "when": "testing.canRefresh" },
    { "key": "meta+; a",              "command": "testing.runAll" },
    { "key": "meta+; c",              "command": "testing.runAtCursor",
                                         "when": "editorTextFocus" },
    { "key": "meta+; f",              "command": "testing.runCurrentFile",
                                         "when": "editorTextFocus" },
    { "key": "meta+; meta+o",         "command": "testing.showMostRecentOutput",
                                         "when": "testing.hasAnyResults" },
    { "key": "meta+; meta+i",         "command": "testing.toggleInlineTestOutput" },
    { "key": "alt+h",                 "command": "testing.toggleTestingPeekHistory",
                                         "when": "testing.isPeekVisible" },
    { "key": "alt+c",                 "command": "toggleSearchCaseSensitive",
                                         "when": "searchViewletFocus" },
    { "key": "alt+c",                 "command": "toggleSearchEditorCaseSensitive",
                                         "when": "inSearchEditor && searchInputBoxFocus" },
    { "key": "alt+l",                 "command": "toggleSearchEditorContextLines",
                                         "when": "inSearchEditor" },
    { "key": "alt+r",                 "command": "toggleSearchEditorRegex",
                                         "when": "inSearchEditor && searchInputBoxFocus" },
    { "key": "alt+w",                 "command": "toggleSearchEditorWholeWord",
                                         "when": "inSearchEditor && searchInputBoxFocus" },
    { "key": "alt+p",                 "command": "toggleSearchPreserveCase",
                                         "when": "searchViewletFocus" },
    { "key": "alt+r",                 "command": "toggleSearchRegex",
                                         "when": "searchViewletFocus" },
    { "key": "alt+w",                 "command": "toggleSearchWholeWord",
                                         "when": "searchViewletFocus" },
    { "key": "meta+alt+meta+n",       "command": "welcome.showNewFileEntries" },
    { "key": "meta+down",             "command": "widgetNavigation.focusNext",
                                         "when": "inputFocus && navigableContainerFocused || navigableContainerFocused && !listFocus || navigableContainerFocused && listScrollAtBoundary == 'both' || navigableContainerFocused && listScrollAtBoundary == 'bottom'" },
    { "key": "meta+up",               "command": "widgetNavigation.focusPrevious",
                                         "when": "inputFocus && navigableContainerFocused || navigableContainerFocused && !listFocus || navigableContainerFocused && listScrollAtBoundary == 'both' || navigableContainerFocused && listScrollAtBoundary == 'top'" },
    { "key": "meta+l",                "command": "workbench.action.chat.clear",
                                         "when": "hasChatProvider && inChat" },
    { "key": "meta+down",             "command": "workbench.action.chat.focusInput",
                                         "when": "inChat && !editorFocus" },
    { "key": "f9",                    "command": "workbench.action.chat.nextCodeBlock",
                                         "when": "hasChatProvider && inChat" },
    { "key": "meta+f9",               "command": "workbench.action.chat.nextFileTree",
                                         "when": "hasChatProvider && inChat" },
    { "key": "shift+f9",              "command": "workbench.action.chat.previousCodeBlock",
                                         "when": "hasChatProvider && inChat" },
    { "key": "meta+shift+f9",         "command": "workbench.action.chat.previousFileTree",
                                         "when": "hasChatProvider && inChat" },
    { "key": "delete",                "command": "workbench.action.chat.remove",
                                         "when": "inChat && !inChatInput" },
    { "key": "meta+w",                "command": "workbench.action.closeActiveEditor" },
    { "key": "meta+k meta+w",         "command": "workbench.action.closeAllEditors" },
    { "key": "meta+k meta+shift+w",   "command": "workbench.action.closeAllGroups" },
    { "key": "meta+k w",              "command": "workbench.action.closeEditorsInGroup" },
    { "key": "meta+k f",              "command": "workbench.action.closeFolder",
                                         "when": "emptyWorkspaceSupport && workbenchState != 'empty'" },
    { "key": "meta+w",                "command": "workbench.action.closeGroup",
                                         "when": "activeEditorGroupEmpty && multipleEditorGroups" },
    { "key": "shift+escape",          "command": "workbench.action.closeQuickOpen",
                                         "when": "inQuickOpen" },
    { "key": "escape",                "command": "workbench.action.closeQuickOpen",
                                         "when": "inQuickOpen" },
    { "key": "meta+k u",              "command": "workbench.action.closeUnmodifiedEditors" },
    { "key": "meta+shift+w",          "command": "workbench.action.closeWindow" },
    { "key": "alt+f4",                "command": "workbench.action.closeWindow" },
    { "key": "alt+f5",                "command": "workbench.action.compareEditor.nextChange",
                                         "when": "textCompareEditorVisible" },
    { "key": "meta+k shift+o",        "command": "workbench.action.compareEditor.openSide",
                                         "when": "inDiffEditor" },
    { "key": "shift+alt+f5",          "command": "workbench.action.compareEditor.previousChange",
                                         "when": "textCompareEditorVisible" },
    { "key": "shift+f5",              "command": "workbench.action.debug.disconnect",
                                         "when": "focusedSessionIsAttach && inDebugMode" },
    { "key": "meta+shift+f5",         "command": "workbench.action.debug.restart",
                                         "when": "inDebugMode" },
    { "key": "meta+f5",               "command": "workbench.action.debug.run",
                                         "when": "debuggersAvailable && debugState != 'initializing'" },
    { "key": "f5",                    "command": "workbench.action.debug.start",
                                         "when": "debuggersAvailable && debugState == 'inactive'" },
    { "key": "meta+f11",              "command": "workbench.action.debug.stepIntoTarget",
                                         "when": "inDebugMode && stepIntoTargetsSupported && debugState == 'stopped'" },
    { "key": "shift+f11",             "command": "workbench.action.debug.stepOut",
                                         "when": "debugState == 'stopped'" },
    { "key": "f10",                   "command": "workbench.action.debug.stepOver",
                                         "when": "debugState == 'stopped'" },
    { "key": "shift+f5",              "command": "workbench.action.debug.stop",
                                         "when": "inDebugMode && !focusedSessionIsAttach" },
    { "key": "meta+k m",              "command": "workbench.action.editor.changeLanguageMode",
                                         "when": "!notebookEditorFocused" },
    { "key": "meta+k p",              "command": "workbench.action.files.copyPathOfActiveFile" },
    { "key": "meta+n",                "command": "workbench.action.files.newUntitledFile" },
    { "key": "meta+o",                "command": "workbench.action.files.openFile",
                                         "when": "true" },
    { "key": "meta+o",                "command": "workbench.action.files.openFileFolder",
                                         "when": "isMacNative && openFolderWorkspaceSupport" },
    { "key": "meta+k meta+o",         "command": "workbench.action.files.openFolder",
                                         "when": "openFolderWorkspaceSupport" },
    { "key": "meta+o",                "command": "workbench.action.files.openFolderViaWorkspace",
                                         "when": "!openFolderWorkspaceSupport && workbenchState == 'workspace'" },
    { "key": "meta+o",                "command": "workbench.action.files.openLocalFile",
                                         "when": "remoteFileDialogVisible" },
    { "key": "meta+k meta+o",         "command": "workbench.action.files.openLocalFolder",
                                         "when": "remoteFileDialogVisible" },
    { "key": "meta+k r",              "command": "workbench.action.files.revealActiveFileInWindows" },
    { "key": "meta+s",                "command": "workbench.action.files.save" },
    { "key": "meta+shift+s",          "command": "workbench.action.files.saveAs" },
    { "key": "meta+shift+s",          "command": "workbench.action.files.saveLocalFile",
                                         "when": "remoteFileDialogVisible" },
    { "key": "meta+k s",              "command": "workbench.action.files.saveWithoutFormatting" },
    { "key": "meta+k o",              "command": "workbench.action.files.showOpenedFileInNewWindow",
                                         "when": "emptyWorkspaceSupport" },
    { "key": "meta+shift+f",          "command": "workbench.action.findInFiles" },
    { "key": "meta+k meta+up",        "command": "workbench.action.focusAboveGroup" },
    { "key": "meta+k meta+down",      "command": "workbench.action.focusBelowGroup" },
    { "key": "meta+8",                "command": "workbench.action.focusEighthEditorGroup" },
    { "key": "meta+5",                "command": "workbench.action.focusFifthEditorGroup" },
    { "key": "meta+1",                "command": "workbench.action.focusFirstEditorGroup" },
    { "key": "meta+4",                "command": "workbench.action.focusFourthEditorGroup" },
    { "key": "meta+k meta+left",      "command": "workbench.action.focusLeftGroup" },
    { "key": "f6",                    "command": "workbench.action.focusNextPart" },
    { "key": "shift+f6",              "command": "workbench.action.focusPreviousPart" },
    { "key": "meta+k meta+right",     "command": "workbench.action.focusRightGroup" },
    { "key": "meta+2",                "command": "workbench.action.focusSecondEditorGroup" },
    { "key": "meta+7",                "command": "workbench.action.focusSeventhEditorGroup" },
    { "key": "meta+0",                "command": "workbench.action.focusSideBar" },
    { "key": "meta+6",                "command": "workbench.action.focusSixthEditorGroup" },
    { "key": "meta+3",                "command": "workbench.action.focusThirdEditorGroup" },
    { "key": "meta+g",                "command": "workbench.action.gotoLine" },
    { "key": "meta+shift+o",          "command": "workbench.action.gotoSymbol" },
    { "key": "down",                  "command": "workbench.action.interactivePlayground.arrowDown",
                                         "when": "interactivePlaygroundFocus && !editorTextFocus" },
    { "key": "up",                    "command": "workbench.action.interactivePlayground.arrowUp",
                                         "when": "interactivePlaygroundFocus && !editorTextFocus" },
    { "key": "pagedown",              "command": "workbench.action.interactivePlayground.pageDown",
                                         "when": "interactivePlaygroundFocus && !editorTextFocus" },
    { "key": "pageup",                "command": "workbench.action.interactivePlayground.pageUp",
                                         "when": "interactivePlaygroundFocus && !editorTextFocus" },
    { "key": "meta+k meta+shift+\\",  "command": "workbench.action.joinEditorInGroup",
                                         "when": "sideBySideEditorActive" },
    { "key": "meta+k enter",          "command": "workbench.action.keepEditor" },
    { "key": "meta+k meta+r",         "command": "workbench.action.keybindingsReference" },
    { "key": "meta+9",                "command": "workbench.action.lastEditorInGroup" },
    { "key": "alt+0",                 "command": "workbench.action.lastEditorInGroup" },
    { "key": "meta+k down",           "command": "workbench.action.moveActiveEditorGroupDown" },
    { "key": "meta+k left",           "command": "workbench.action.moveActiveEditorGroupLeft" },
    { "key": "meta+k right",          "command": "workbench.action.moveActiveEditorGroupRight" },
    { "key": "meta+k up",             "command": "workbench.action.moveActiveEditorGroupUp" },
    { "key": "meta+shift+pageup",     "command": "workbench.action.moveEditorLeftInGroup" },
    { "key": "meta+shift+pagedown",   "command": "workbench.action.moveEditorRightInGroup" },
    { "key": "shift+alt+1",           "command": "workbench.action.moveEditorToFirstGroup" },
    { "key": "shift+alt+9",           "command": "workbench.action.moveEditorToLastGroup" },
    { "key": "meta+alt+right",        "command": "workbench.action.moveEditorToNextGroup" },
    { "key": "meta+alt+left",         "command": "workbench.action.moveEditorToPreviousGroup" },
    { "key": "meta+alt+-",            "command": "workbench.action.navigateBack",
                                         "when": "canNavigateBack" },
    { "key": "meta+shift+-",          "command": "workbench.action.navigateForward",
                                         "when": "canNavigateForward" },
    { "key": "meta+k meta+q",         "command": "workbench.action.navigateToLastEditLocation" },
    { "key": "meta+shift+n",          "command": "workbench.action.newWindow" },
    { "key": "meta+pagedown",         "command": "workbench.action.nextEditor" },
    { "key": "meta+k meta+pagedown",  "command": "workbench.action.nextEditorInGroup" },
    { "key": "alt+1",                 "command": "workbench.action.openEditorAtIndex1" },
    { "key": "alt+2",                 "command": "workbench.action.openEditorAtIndex2" },
    { "key": "alt+3",                 "command": "workbench.action.openEditorAtIndex3" },
    { "key": "alt+4",                 "command": "workbench.action.openEditorAtIndex4" },
    { "key": "alt+5",                 "command": "workbench.action.openEditorAtIndex5" },
    { "key": "alt+6",                 "command": "workbench.action.openEditorAtIndex6" },
    { "key": "alt+7",                 "command": "workbench.action.openEditorAtIndex7" },
    { "key": "alt+8",                 "command": "workbench.action.openEditorAtIndex8" },
    { "key": "alt+9",                 "command": "workbench.action.openEditorAtIndex9" },
    { "key": "meta+k meta+s",         "command": "workbench.action.openGlobalKeybindings" },
    { "key": "meta+r",                "command": "workbench.action.openRecent" },
    { "key": "meta+,",                "command": "workbench.action.openSettings" },
    { "key": "meta+k meta+h",         "command": "workbench.action.output.toggleOutput",
                                         "when": "workbench.panel.output.active" },
    { "key": "meta+k shift+enter",    "command": "workbench.action.pinEditor",
                                         "when": "!activeEditorIsPinned" },
    { "key": "meta+pageup",           "command": "workbench.action.previousEditor" },
    { "key": "meta+k meta+pageup",    "command": "workbench.action.previousEditorInGroup" },
    { "key": "meta+e",                "command": "workbench.action.quickOpen" },
    { "key": "meta+p",                "command": "workbench.action.quickOpen" },
    { "key": "meta+shift+tab",        "command": "workbench.action.quickOpenLeastRecentlyUsedEditorInGroup",
                                         "when": "!activeEditorGroupEmpty" },
    { "key": "meta+tab",              "command": "workbench.action.quickOpenPreviousRecentlyUsedEditorInGroup",
                                         "when": "!activeEditorGroupEmpty" },
    { "key": "meta+shift+alt+i",      "command": "workbench.action.quickchat.toggle",
                                         "when": "hasChatProvider" },
    { "key": "meta+q",                "command": "workbench.action.quit" },
    { "key": "meta+alt+o",            "command": "workbench.action.remote.showMenu" },
    { "key": "meta+shift+t",          "command": "workbench.action.reopenClosedEditor" },
    { "key": "meta+shift+h",          "command": "workbench.action.replaceInFiles" },
    { "key": "meta+shift+j",          "command": "workbench.action.search.toggleQueryDetails",
                                         "when": "inSearchEditor || searchViewletFocus" },
    { "key": "meta+k meta+t",         "command": "workbench.action.selectTheme" },
    { "key": "meta+k meta+p",         "command": "workbench.action.showAllEditors" },
    { "key": "meta+t",                "command": "workbench.action.showAllSymbols" },
    { "key": "f1",                    "command": "workbench.action.showCommands" },
    { "key": "meta+shift+p",          "command": "workbench.action.showCommands" },
    { "key": "meta+k meta+i",         "command": "workbench.action.showTreeHover",
                                         "when": "customTreeView && listFocus && !inputFocus" },
    { "key": "meta+\\",               "command": "workbench.action.splitEditor" },
    { "key": "meta+k meta+\\",        "command": "workbench.action.splitEditorDown" },
    { "key": "meta+k meta+shift+\\",  "command": "workbench.action.splitEditorInGroup",
                                         "when": "activeEditorCanSplitInGroup" },
    { "key": "meta+k meta+\\",        "command": "workbench.action.splitEditorLeft" },
    { "key": "meta+k meta+\\",        "command": "workbench.action.splitEditorOrthogonal" },
    { "key": "meta+k meta+\\",        "command": "workbench.action.splitEditorRight" },
    { "key": "meta+k meta+\\",        "command": "workbench.action.splitEditorUp" },
    { "key": "meta+shift+b",          "command": "workbench.action.tasks.build",
                                         "when": "taskCommandsRegistered" },
    { "key": "escape",                "command": "workbench.action.terminal.clearSelection",
                                         "when": "terminalFocusInAny && terminalHasBeenCreated && terminalTextSelected && !terminalFindVisible || terminalFocusInAny && terminalProcessSupported && terminalTextSelected && !terminalFindVisible" },
    { "key": "meta+shift+c",          "command": "workbench.action.terminal.copySelection",
                                         "when": "terminalTextSelectedInFocused || terminalFocus && terminalHasBeenCreated && terminalTextSelected || terminalFocus && terminalProcessSupported && terminalTextSelected || terminalFocus && terminalTextSelected && terminalTextSelectedInFocused || terminalHasBeenCreated && terminalTextSelected && terminalTextSelectedInFocused || terminalProcessSupported && terminalTextSelected && terminalTextSelectedInFocused" },
    { "key": "f3",                    "command": "workbench.action.terminal.findNext",
                                         "when": "terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported || terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported" },
    { "key": "shift+enter",           "command": "workbench.action.terminal.findNext",
                                         "when": "terminalFindInputFocused && terminalHasBeenCreated || terminalFindInputFocused && terminalProcessSupported" },
    { "key": "shift+f3",              "command": "workbench.action.terminal.findPrevious",
                                         "when": "terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported || terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported" },
    { "key": "enter",                 "command": "workbench.action.terminal.findPrevious",
                                         "when": "terminalFindInputFocused && terminalHasBeenCreated || terminalFindInputFocused && terminalProcessSupported" },
    { "key": "meta+down",             "command": "workbench.action.terminal.focus",
                                         "when": "accessibilityModeEnabled && terminalAccessibleBufferOnLastLine && terminalHasBeenCreated || accessibilityModeEnabled && terminalAccessibleBufferOnLastLine && terminalProcessSupported" },
    { "key": "meta+up",               "command": "workbench.action.terminal.focusAccessibleBuffer",
                                         "when": "accessibilityModeEnabled && terminalFocus && terminalHasBeenCreated && terminalTabFocusMode || accessibilityModeEnabled && terminalFocus && terminalHasBeenCreated && !terminalAccessibleBufferFocus || accessibilityModeEnabled && terminalFocus && terminalProcessSupported && terminalTabFocusMode || accessibilityModeEnabled && terminalFocus && terminalProcessSupported && !terminalAccessibleBufferFocus" },
    { "key": "alt+f2",                "command": "workbench.action.terminal.focusAccessibleBuffer",
                                         "when": "accessibilityModeEnabled && terminalFocus && terminalHasBeenCreated && terminalTabFocusMode || accessibilityModeEnabled && terminalFocus && terminalHasBeenCreated && !terminalAccessibleBufferFocus || accessibilityModeEnabled && terminalFocus && terminalProcessSupported && terminalTabFocusMode || accessibilityModeEnabled && terminalFocus && terminalProcessSupported && !terminalAccessibleBufferFocus" },
    { "key": "meta+f",                "command": "workbench.action.terminal.focusFind",
                                         "when": "terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported || terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported" },
    { "key": "meta+k meta+i",         "command": "workbench.action.terminal.focusHover",
                                         "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalIsOpen || terminalFocus && terminalProcessSupported || terminalHasBeenCreated && terminalTabsFocus || terminalIsOpen && terminalTabsFocus || terminalProcessSupported && terminalTabsFocus" },
    { "key": "meta+pagedown",         "command": "workbench.action.terminal.focusNext",
                                         "when": "terminalFocus && terminalHasBeenCreated && !terminalEditorFocus || terminalFocus && terminalProcessSupported && !terminalEditorFocus" },
    { "key": "alt+down",              "command": "workbench.action.terminal.focusNextPane",
                                         "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported" },
    { "key": "alt+right",             "command": "workbench.action.terminal.focusNextPane",
                                         "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported" },
    { "key": "meta+pageup",           "command": "workbench.action.terminal.focusPrevious",
                                         "when": "terminalFocus && terminalHasBeenCreated && !terminalEditorFocus || terminalFocus && terminalProcessSupported && !terminalEditorFocus" },
    { "key": "alt+up",                "command": "workbench.action.terminal.focusPreviousPane",
                                         "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported" },
    { "key": "alt+left",              "command": "workbench.action.terminal.focusPreviousPane",
                                         "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported" },
    { "key": "meta+shift+\\",         "command": "workbench.action.terminal.focusTabs",
                                         "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported || terminalHasBeenCreated && terminalTabsFocus || terminalProcessSupported && terminalTabsFocus" },
    { "key": "meta+g",                "command": "workbench.action.terminal.goToRecentDirectory",
                                         "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported" },
    { "key": "shift+escape",          "command": "workbench.action.terminal.hideFind",
                                         "when": "terminalFindVisible && terminalFocus && terminalHasBeenCreated || terminalFindVisible && terminalFocus && terminalProcessSupported" },
    { "key": "escape",                "command": "workbench.action.terminal.hideFind",
                                         "when": "terminalFindVisible && terminalFocus && terminalHasBeenCreated || terminalFindVisible && terminalFocus && terminalProcessSupported" },
    { "key": "delete",                "command": "workbench.action.terminal.killActiveTab",
                                         "when": "terminalHasBeenCreated && terminalTabsFocus || terminalIsOpen && terminalTabsFocus || terminalProcessSupported && terminalTabsFocus" },
    { "key": "meta+w",                "command": "workbench.action.terminal.killEditor",
                                         "when": "terminalEditorFocus && terminalFocus && terminalHasBeenCreated && resourceScheme == 'vscode-terminal' || terminalEditorFocus && terminalFocus && terminalProcessSupported && resourceScheme == 'vscode-terminal'" },
    { "key": "meta+shift+`",          "command": "workbench.action.terminal.new",
                                         "when": "terminalProcessSupported || terminalWebExtensionContributedProfile" },
    { "key": "meta+shift+c",          "command": "workbench.action.terminal.openNativeConsole",
                                         "when": "!terminalFocus" },
    { "key": "meta+shift+v",          "command": "workbench.action.terminal.paste",
                                         "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported" },
    { "key": "shift+insert",          "command": "workbench.action.terminal.pasteSelection",
                                         "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported" },
    { "key": "f2",                    "command": "workbench.action.terminal.renameActiveTab",
                                         "when": "terminalHasBeenCreated && terminalTabsFocus && terminalTabsSingularSelection || terminalProcessSupported && terminalTabsFocus && terminalTabsSingularSelection" },
    { "key": "meta+shift+left",       "command": "workbench.action.terminal.resizePaneLeft",
                                         "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported" },
    { "key": "meta+shift+right",      "command": "workbench.action.terminal.resizePaneRight",
                                         "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported" },
    { "key": "meta+r",                "command": "workbench.action.terminal.runRecentCommand",
                                         "when": "accessibilityModeEnabled && terminalFocus && terminalHasBeenCreated || accessibilityModeEnabled && terminalFocus && terminalProcessSupported" },
    { "key": "meta+alt+r",            "command": "workbench.action.terminal.runRecentCommand",
                                         "when": "terminalFocus && terminalHasBeenCreated && !accessibilityModeEnabled || terminalFocus && terminalProcessSupported && !accessibilityModeEnabled" },
    { "key": "meta+shift+down",       "command": "workbench.action.terminal.scrollDown",
                                         "when": "terminalFocusInAny && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocusInAny && terminalProcessSupported && !terminalAltBufferActive" },
    { "key": "shift+pagedown",        "command": "workbench.action.terminal.scrollDownPage",
                                         "when": "terminalFocusInAny && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocusInAny && terminalProcessSupported && !terminalAltBufferActive" },
    { "key": "shift+end",             "command": "workbench.action.terminal.scrollToBottom",
                                         "when": "terminalFocusInAny && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocusInAny && terminalProcessSupported && !terminalAltBufferActive" },
    { "key": "meta+down",             "command": "workbench.action.terminal.scrollToNextCommand",
                                         "when": "terminalFocus && terminalHasBeenCreated && !accessibilityModeEnabled || terminalFocus && terminalProcessSupported && !accessibilityModeEnabled" },
    { "key": "meta+up",               "command": "workbench.action.terminal.scrollToPreviousCommand",
                                         "when": "terminalFocus && terminalHasBeenCreated && !accessibilityModeEnabled || terminalFocus && terminalProcessSupported && !accessibilityModeEnabled" },
    { "key": "shift+home",            "command": "workbench.action.terminal.scrollToTop",
                                         "when": "terminalFocusInAny && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocusInAny && terminalProcessSupported && !terminalAltBufferActive" },
    { "key": "meta+shift+up",         "command": "workbench.action.terminal.scrollUp",
                                         "when": "terminalFocusInAny && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocusInAny && terminalProcessSupported && !terminalAltBufferActive" },
    { "key": "shift+pageup",          "command": "workbench.action.terminal.scrollUpPage",
                                         "when": "terminalFocusInAny && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocusInAny && terminalProcessSupported && !terminalAltBufferActive" },
    { "key": "meta+shift+down",       "command": "workbench.action.terminal.selectToNextCommand",
                                         "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported" },
    { "key": "meta+shift+up",         "command": "workbench.action.terminal.selectToPreviousCommand",
                                         "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported" },
    { "key": "meta+space",            "command": "workbench.action.terminal.sendSequence",
                                         "when": "terminalFocus && terminalShellIntegrationEnabled && !accessibilityModeEnabled && terminalShellType == 'pwsh'",
                                         "args": {"text":"\u001b[24~a"} },
    { "key": "alt+space",             "command": "workbench.action.terminal.sendSequence",
                                         "when": "terminalFocus && terminalShellIntegrationEnabled && !accessibilityModeEnabled && terminalShellType == 'pwsh'",
                                         "args": {"text":"\u001b[24~b"} },
    { "key": "shift+enter",           "command": "workbench.action.terminal.sendSequence",
                                         "when": "terminalFocus && terminalShellIntegrationEnabled && !accessibilityModeEnabled && terminalShellType == 'pwsh'",
                                         "args": {"text":"\u001b[24~c"} },
    { "key": "meta+space",            "command": "workbench.action.terminal.sendSequence",
                                         "when": "config.terminal.integrated.shellIntegration.suggestEnabled && terminalFocus && terminalShellIntegrationEnabled && !accessibilityModeEnabled && terminalShellType == 'pwsh'",
                                         "args": {"text":"\u001b[24~e"} },
    { "key": "meta+alt+r",            "command": "workbench.action.terminal.sendSequence",
                                         "when": "accessibilityModeEnabled && terminalFocus",
                                         "args": {"text":"\u0012"} },
    { "key": "meta+alt+g",            "command": "workbench.action.terminal.sendSequence",
                                         "when": "terminalFocus",
                                         "args": {"text":"\u0007"} },
    { "key": "meta+backspace",        "command": "workbench.action.terminal.sendSequence",
                                         "when": "terminalFocus",
                                         "args": {"text":"\u0017"} },
    { "key": "meta+delete",           "command": "workbench.action.terminal.sendSequence",
                                         "when": "terminalFocus",
                                         "args": {"text":"\u001bd"} },
    { "key": "meta+shift+2",          "command": "workbench.action.terminal.sendSequence",
                                         "when": "terminalFocus",
                                         "args": {"text":"\u0000"} },
    { "key": "meta+shift+6",          "command": "workbench.action.terminal.sendSequence",
                                         "when": "terminalFocus",
                                         "args": {"text":"\u001e"} },
    { "key": "meta+/",                "command": "workbench.action.terminal.sendSequence",
                                         "when": "terminalFocus",
                                         "args": {"text":"\u001f"} },
    { "key": "meta+.",                "command": "workbench.action.terminal.showQuickFixes",
                                         "when": "terminalFocus" },
    { "key": "alt+z",                 "command": "workbench.action.terminal.sizeToContentWidth",
                                         "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen || terminalFocus && terminalIsOpen && terminalProcessSupported" },
    { "key": "meta+shift+5",          "command": "workbench.action.terminal.split",
                                         "when": "terminalFocus && terminalProcessSupported || terminalFocus && terminalWebExtensionContributedProfile" },
    { "key": "meta+shift+5",          "command": "workbench.action.terminal.splitActiveTab",
                                         "when": "terminalProcessSupported && terminalTabsFocus" },
    { "key": "alt+c",                 "command": "workbench.action.terminal.toggleFindCaseSensitive",
                                         "when": "terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported || terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported" },
    { "key": "alt+r",                 "command": "workbench.action.terminal.toggleFindRegex",
                                         "when": "terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported || terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported" },
    { "key": "alt+w",                 "command": "workbench.action.terminal.toggleFindWholeWord",
                                         "when": "terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported || terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported" },
    { "key": "meta+`",                "command": "workbench.action.terminal.toggleTerminal",
                                         "when": "terminal.active" },
    { "key": "meta+alt+b",            "command": "workbench.action.toggleAuxiliaryBar" },
    { "key": "shift+alt+0",           "command": "workbench.action.toggleEditorGroupLayout" },
    { "key": "f11",                   "command": "workbench.action.toggleFullScreen",
                                         "when": "!isIOS" },
    { "key": "meta+j",                "command": "workbench.action.togglePanel" },
    { "key": "meta+b",                "command": "workbench.action.toggleSidebarVisibility" },
    { "key": "meta+k z",              "command": "workbench.action.toggleZenMode" },
    { "key": "meta+k shift+enter",    "command": "workbench.action.unpinEditor",
                                         "when": "activeEditorIsPinned" },
    { "key": "meta+numpad_add",       "command": "workbench.action.zoomIn" },
    { "key": "meta+shift+=",          "command": "workbench.action.zoomIn" },
    { "key": "meta+=",                "command": "workbench.action.zoomIn" },
    { "key": "meta+numpad_subtract",  "command": "workbench.action.zoomOut" },
    { "key": "meta+-",                "command": "workbench.action.zoomOut" },
    { "key": "meta+numpad0",          "command": "workbench.action.zoomReset" },
    { "key": "meta+shift+m",          "command": "workbench.actions.view.problems",
                                         "when": "workbench.panel.markers.view.active" },
    { "key": "escape",                "command": "workbench.banner.focusBanner",
                                         "when": "bannerFocused" },
    { "key": "down",                  "command": "workbench.banner.focusNextAction",
                                         "when": "bannerFocused" },
    { "key": "right",                 "command": "workbench.banner.focusNextAction",
                                         "when": "bannerFocused" },
    { "key": "up",                    "command": "workbench.banner.focusPreviousAction",
                                         "when": "bannerFocused" },
    { "key": "left",                  "command": "workbench.banner.focusPreviousAction",
                                         "when": "bannerFocused" },
    { "key": "meta+shift+y",          "command": "workbench.debug.action.toggleRepl",
                                         "when": "workbench.panel.repl.view.active" },
    { "key": "meta+k c",              "command": "workbench.files.action.compareWithClipboard" },
    { "key": "meta+k d",              "command": "workbench.files.action.compareWithSaved" },
    { "key": "meta+k e",              "command": "workbench.files.action.focusOpenEditorsView",
                                         "when": "workbench.explorer.openEditorsView.active" },
    { "key": "escape",                "command": "workbench.statusBar.clearFocus",
                                         "when": "statusBarFocused" },
    { "key": "home",                  "command": "workbench.statusBar.focusFirst",
                                         "when": "statusBarFocused" },
    { "key": "end",                   "command": "workbench.statusBar.focusLast",
                                         "when": "statusBarFocused" },
    { "key": "down",                  "command": "workbench.statusBar.focusNext",
                                         "when": "statusBarFocused" },
    { "key": "right",                 "command": "workbench.statusBar.focusNext",
                                         "when": "statusBarFocused" },
    { "key": "up",                    "command": "workbench.statusBar.focusPrevious",
                                         "when": "statusBarFocused" },
    { "key": "left",                  "command": "workbench.statusBar.focusPrevious",
                                         "when": "statusBarFocused" },
    { "key": "meta+shift+d",          "command": "workbench.view.debug",
                                         "when": "viewContainer.workbench.view.debug.enabled" },
    { "key": "meta+shift+e",          "command": "workbench.view.explorer",
                                         "when": "viewContainer.workbench.view.explorer.enabled" },
    { "key": "meta+shift+x",          "command": "workbench.view.extensions",
                                         "when": "viewContainer.workbench.view.extensions.enabled" },
    { "key": "meta+shift+g",          "command": "workbench.view.scm",
                                         "when": "workbench.scm.active" },
    { "key": "meta+shift+f",          "command": "workbench.view.search",
                                         "when": "workbench.view.search.active && neverMatch =~ /doesNotMatch/" },
    { "key": "meta+right",            "command": "breadcrumbs.focusNextWithPicker",
                                         "when": "breadcrumbsActive && breadcrumbsVisible && listFocus && !inputFocus" },
    { "key": "meta+left",             "command": "breadcrumbs.focusPreviousWithPicker",
                                         "when": "breadcrumbsActive && breadcrumbsVisible && listFocus && !inputFocus" },
    { "key": "escape",                "command": "breadcrumbs.selectEditor",
                                         "when": "breadcrumbsActive && breadcrumbsVisible" },
    { "key": "meta+k down",           "command": "views.moveViewDown",
                                         "when": "focusedView != ''" },
    { "key": "meta+k left",           "command": "views.moveViewLeft",
                                         "when": "focusedView != ''" },
    { "key": "meta+k right",          "command": "views.moveViewRight",
                                         "when": "focusedView != ''" },
    { "key": "meta+k up",             "command": "views.moveViewUp",
                                         "when": "focusedView != ''" },
    { "key": "meta+pagedown",         "command": "workbench.action.debug.nextConsole",
                                         "when": "inDebugRepl" },
    { "key": "meta+pageup",           "command": "workbench.action.debug.prevConsole",
                                         "when": "inDebugRepl" },
    { "key": "tab",                   "command": "workbench.action.terminal.acceptSelectedSuggestion",
                                         "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible || terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible" },
    { "key": "enter",                 "command": "workbench.action.terminal.acceptSelectedSuggestion",
                                         "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible || terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible" },
    { "key": "escape",                "command": "workbench.action.terminal.hideSuggestWidget",
                                         "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible || terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible" },
    { "key": "meta+shift+o",          "command": "workbench.action.terminal.openDetectedLink",
                                         "when": "terminalAccessibleBufferFocus && terminalHasBeenCreated || terminalFocus && terminalHasBeenCreated" },
    { "key": "pagedown",              "command": "workbench.action.terminal.selectNextPageSuggestion",
                                         "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible || terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible" },
    { "key": "down",                  "command": "workbench.action.terminal.selectNextSuggestion",
                                         "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible || terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible" },
    { "key": "pageup",                "command": "workbench.action.terminal.selectPrevPageSuggestion",
                                         "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible || terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible" },
    { "key": "up",                    "command": "workbench.action.terminal.selectPrevSuggestion",
                                         "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible || terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible" },
    { "key": "f6",                    "command": "workbench.action.debug.pause",
                                         "when": "debugState == 'running'" },
    { "key": "meta+down",             "command": "workbench.action.terminal.accessibleBufferGoToNextCommand",
                                         "when": "terminalAccessibleBufferFocus && !accessibilityModeEnabled || terminalAccessibleBufferFocus && terminalHasBeenCreated && !accessibilityModeEnabled || terminalAccessibleBufferFocus && terminalProcessSupported && !accessibilityModeEnabled" },
    { "key": "alt+down",              "command": "workbench.action.terminal.accessibleBufferGoToNextCommand",
                                         "when": "accessibilityModeEnabled && terminalAccessibleBufferFocus || accessibilityModeEnabled && terminalAccessibleBufferFocus && terminalHasBeenCreated || accessibilityModeEnabled && terminalAccessibleBufferFocus && terminalProcessSupported" },
    { "key": "meta+up",               "command": "workbench.action.terminal.accessibleBufferGoToPreviousCommand",
                                         "when": "terminalAccessibleBufferFocus && terminalHasBeenCreated && !accessibilityModeEnabled || terminalAccessibleBufferFocus && terminalProcessSupported && !accessibilityModeEnabled" },
    { "key": "alt+up",                "command": "workbench.action.terminal.accessibleBufferGoToPreviousCommand",
                                         "when": "accessibilityModeEnabled && terminalAccessibleBufferFocus && terminalHasBeenCreated || accessibilityModeEnabled && terminalAccessibleBufferFocus && terminalProcessSupported" },
    { "key": "meta+shift+g",          "command": "workbench.action.terminal.navigateAccessibleBuffer",
                                         "when": "terminalAccessibleBufferFocus && terminalHasBeenCreated || terminalAccessibleBufferFocus && terminalProcessSupported" },
    { "key": "f2",                    "command": "debug.renameWatchExpression",
                                         "when": "watchExpressionsFocused" },
    { "key": "f2",                    "command": "debug.setVariable",
                                         "when": "variablesFocused" },
    { "key": "space",                 "command": "debug.toggleBreakpoint",
                                         "when": "breakpointsFocused && !inputFocus" },
    { "key": "escape",                "command": "notebook.cell.quitEdit",
                                         "when": "notebookEditorFocused && notebookOutputFocused" },
    { "key": "shift+delete",          "command": "deleteFile",
                                         "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceReadonly && !inputFocus" },
    { "key": "delete",                "command": "deleteFile",
                                         "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceMoveableToTrash && !explorerResourceReadonly && !inputFocus" },
    { "key": "meta+shift+[IntlBackslash]", "command": "editor.action.accessibleViewGoToSymbol",
                                         "when": "accessibilityHelpIsShown && accessibleViewGoToSymbolSupported || accessibleViewGoToSymbolSupported && accessibleViewIsShown" },
    { "key": "meta+shift+.",          "command": "editor.action.accessibleViewGoToSymbol",
                                         "when": "accessibilityHelpIsShown && accessibleViewGoToSymbolSupported || accessibleViewGoToSymbolSupported && accessibleViewIsShown" },
    { "key": "meta+shift+o",          "command": "editor.action.accessibleViewGoToSymbol",
                                         "when": "accessibilityHelpIsShown && accessibleViewGoToSymbolSupported || accessibleViewGoToSymbolSupported && accessibleViewIsShown" },
    { "key": "meta+e",                "command": "editor.action.toggleScreenReaderAccessibilityMode",
                                         "when": "accessibilityHelpIsShown" },
    { "key": "shift+alt+f4",          "command": "editor.action.toggleScreenReaderAccessibilityMode" },
    { "key": "escape",                "command": "editor.closeCallHierarchy",
                                         "when": "callHierarchyVisible && !config.editor.stablePeek" },
    { "key": "escape",                "command": "editor.closeTypeHierarchy",
                                         "when": "typeHierarchyVisible && !config.editor.stablePeek" },
    { "key": "enter",                 "command": "explorer.openAndPassFocus",
                                         "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsFolder && !inputFocus" },
    { "key": "escape",                "command": "filesExplorer.cancelCut",
                                         "when": "explorerResourceCut && filesExplorerFocus && foldersViewVisible && !inputFocus" },
    { "key": "meta+c",                "command": "filesExplorer.copy",
                                         "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !inputFocus" },
    { "key": "meta+x",                "command": "filesExplorer.cut",
                                         "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus" },
    { "key": "space",                 "command": "filesExplorer.openFilePreserveFocus",
                                         "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsFolder && !inputFocus" },
    { "key": "meta+v",                "command": "filesExplorer.paste",
                                         "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceReadonly && !inputFocus" },
    { "key": "home",                  "command": "firstCompressedFolder",
                                         "when": "explorerViewletCompressedFocus && filesExplorerFocus && foldersViewVisible && !explorerViewletCompressedFirstFocus && !inputFocus" },
    { "key": "end",                   "command": "lastCompressedFolder",
                                         "when": "explorerViewletCompressedFocus && filesExplorerFocus && foldersViewVisible && !explorerViewletCompressedLastFocus && !inputFocus" },
    { "key": "delete",                "command": "moveFileToTrash",
                                         "when": "explorerResourceMoveableToTrash && filesExplorerFocus && foldersViewVisible && !explorerResourceReadonly && !inputFocus" },
    { "key": "right",                 "command": "nextCompressedFolder",
                                         "when": "explorerViewletCompressedFocus && filesExplorerFocus && foldersViewVisible && !explorerViewletCompressedLastFocus && !inputFocus" },
    { "key": "left",                  "command": "previousCompressedFolder",
                                         "when": "explorerViewletCompressedFocus && filesExplorerFocus && foldersViewVisible && !explorerViewletCompressedFirstFocus && !inputFocus" },
    { "key": "delete",                "command": "remote.tunnel.closeInline",
                                         "when": "tunnelCloseable && tunnelViewFocus" },
    { "key": "meta+c",                "command": "remote.tunnel.copyAddressInline",
                                         "when": "tunnelViewFocus && tunnelType == 'Detected' && tunnelViewMultiSelection == 'undefined' || tunnelViewFocus && tunnelType == 'Forwarded' && tunnelViewMultiSelection == 'undefined'" },
    { "key": "f2",                    "command": "remote.tunnel.label",
                                         "when": "tunnelViewFocus && tunnelType == 'Forwarded' && tunnelViewMultiSelection == 'undefined'" },
    { "key": "f2",                    "command": "renameFile",
                                         "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus" },
    { "key": "f5",                    "command": "workbench.action.debug.continue",
                                         "when": "debugState == 'stopped'" },
    { "key": "f11",                   "command": "workbench.action.debug.stepInto",
                                         "when": "debugState != 'inactive'" },
    { "key": "shift+escape",          "command": "closeReferenceSearch",
                                         "when": "referenceSearchVisible && !config.editor.stablePeek" },
    { "key": "escape",                "command": "closeReferenceSearch",
                                         "when": "referenceSearchVisible && !config.editor.stablePeek" },
    { "key": "escape",                "command": "notifications.hideList",
                                         "when": "notificationCenterVisible" },
    { "key": "meta+alt+-",            "command": "workbench.action.quickInputBack",
                                         "when": "inQuickOpen" },
    { "key": "meta+tab",              "command": "workbench.action.quickOpenNavigateNextInEditorPicker",
                                         "when": "inEditorsPicker && inQuickOpen" },
    { "key": "meta+e",                "command": "workbench.action.quickOpenNavigateNextInFilePicker",
                                         "when": "inFilesPicker && inQuickOpen" },
    { "key": "meta+p",                "command": "workbench.action.quickOpenNavigateNextInFilePicker",
                                         "when": "inFilesPicker && inQuickOpen" },
    { "key": "meta+r",                "command": "workbench.action.quickOpenNavigateNextInRecentFilesPicker",
                                         "when": "inQuickOpen && inRecentFilesPicker" },
    { "key": "meta+shift+tab",        "command": "workbench.action.quickOpenNavigatePreviousInEditorPicker",
                                         "when": "inEditorsPicker && inQuickOpen" },
    { "key": "meta+shift+e",          "command": "workbench.action.quickOpenNavigatePreviousInFilePicker",
                                         "when": "inFilesPicker && inQuickOpen" },
    { "key": "meta+shift+p",          "command": "workbench.action.quickOpenNavigatePreviousInFilePicker",
                                         "when": "inFilesPicker && inQuickOpen" },
    { "key": "meta+shift+r",          "command": "workbench.action.quickOpenNavigatePreviousInRecentFilesPicker",
                                         "when": "inQuickOpen && inRecentFilesPicker" },
    { "key": "meta+r",                "command": "workbench.action.reloadWindow",
                                         "when": "isDevelopment" },
    { "key": "meta+shift+f",          "command": "workbench.action.terminal.searchWorkspace",
                                         "when": "terminalFocus && terminalProcessSupported && terminalTextSelected" },
    { "key": "meta+shift+i",          "command": "workbench.action.toggleDevTools",
                                         "when": "isDevelopment" },
    { "key": "escape",                "command": "notifications.hideToasts",
                                         "when": "notificationFocus && notificationToastsVisible" },
    { "key": "f10",                   "command": "extension.node-debug.startWithStopOnEntry",
                                         "when": "!inDebugMode && debugConfigurationType == 'node' || !inDebugMode && debugConfigurationType == 'pwa-extensionHost' || !inDebugMode && debugConfigurationType == 'pwa-node'" },
    { "key": "meta+k meta+alt+s",     "command": "git.stageSelectedRanges",
                                         "when": "isInDiffEditor && !operationInProgress" },
    { "key": "meta+shift+v",          "command": "markdown.showPreview",
                                         "when": "!notebookEditorFocused && editorLangId == 'markdown'" },
    { "key": "shift+alt+f12",         "command": "references-view.findReferences",
                                         "when": "editorHasReferenceProvider" },
    { "key": "f11",                   "command": "extension.node-debug.startWithStopOnEntry",
                                         "when": "!inDebugMode && activeViewlet == 'workbench.view.debug' && debugConfigurationType == 'node' || !inDebugMode && activeViewlet == 'workbench.view.debug' && debugConfigurationType == 'pwa-extensionHost' || !inDebugMode && activeViewlet == 'workbench.view.debug' && debugConfigurationType == 'pwa-node'" },
    { "key": "meta+k meta+n",         "command": "git.unstageSelectedRanges",
                                         "when": "isInDiffEditor && !operationInProgress" },
    { "key": "meta+k v",              "command": "markdown.showPreviewToSide",
                                         "when": "!notebookEditorFocused && editorLangId == 'markdown'" },
    { "key": "f4",                    "command": "references-view.next",
                                         "when": "reference-list.hasResult && references-view.canNavigate" },
    { "key": "meta+k meta+r",         "command": "git.revertSelectedRanges",
                                         "when": "isInDiffEditor && !operationInProgress" },
    { "key": "shift+f4",              "command": "references-view.prev",
                                         "when": "reference-list.hasResult && references-view.canNavigate" },
    { "key": "shift+alt+h",           "command": "references-view.showCallHierarchy",
                                         "when": "editorHasCallHierarchyProvider" },
    { "key": "meta+.",                "command": "acceptSelectedCodeAction",
                                         "when": "codeActionMenuVisible" },
    { "key": "enter",                 "command": "acceptSelectedCodeAction",
                                         "when": "codeActionMenuVisible" },
    { "key": "shift+escape",          "command": "hideCodeActionWidget",
                                         "when": "codeActionMenuVisible" },
    { "key": "escape",                "command": "hideCodeActionWidget",
                                         "when": "codeActionMenuVisible" },
    { "key": "meta+enter",            "command": "previewSelectedCodeAction",
                                         "when": "codeActionMenuVisible" },
    { "key": "meta+down",             "command": "selectNextCodeAction",
                                         "when": "codeActionMenuVisible" },
    { "key": "down",                  "command": "selectNextCodeAction",
                                         "when": "codeActionMenuVisible" },
    { "key": "meta+up",               "command": "selectPrevCodeAction",
                                         "when": "codeActionMenuVisible" },
    { "key": "up",                    "command": "selectPrevCodeAction",
                                         "when": "codeActionMenuVisible" },
    { "key": "escape",                "command": "diffEditor.exitCompareMove",
                                         "when": "comparingMovedCode" }
    ]
    
    
    